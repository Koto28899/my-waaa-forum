// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/star"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StarUpdate is the builder for updating Star entities.
type StarUpdate struct {
	config
	hooks    []Hook
	mutation *StarMutation
}

// Where appends a list predicates to the StarUpdate builder.
func (su *StarUpdate) Where(ps ...predicate.Star) *StarUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StarUpdate) SetUpdatedAt(t time.Time) *StarUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StarUpdate) SetDeletedAt(t time.Time) *StarUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StarUpdate) ClearDeletedAt() *StarUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetFromRoleID sets the "from_role_id" field.
func (su *StarUpdate) SetFromRoleID(i int64) *StarUpdate {
	su.mutation.ResetFromRoleID()
	su.mutation.SetFromRoleID(i)
	return su
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (su *StarUpdate) SetNillableFromRoleID(i *int64) *StarUpdate {
	if i != nil {
		su.SetFromRoleID(*i)
	}
	return su
}

// AddFromRoleID adds i to the "from_role_id" field.
func (su *StarUpdate) AddFromRoleID(i int64) *StarUpdate {
	su.mutation.AddFromRoleID(i)
	return su
}

// SetSecneType sets the "secne_type" field.
func (su *StarUpdate) SetSecneType(st star.SecneType) *StarUpdate {
	su.mutation.SetSecneType(st)
	return su
}

// SetNillableSecneType sets the "secne_type" field if the given value is not nil.
func (su *StarUpdate) SetNillableSecneType(st *star.SecneType) *StarUpdate {
	if st != nil {
		su.SetSecneType(*st)
	}
	return su
}

// SetSenceID sets the "sence_id" field.
func (su *StarUpdate) SetSenceID(i int64) *StarUpdate {
	su.mutation.ResetSenceID()
	su.mutation.SetSenceID(i)
	return su
}

// SetNillableSenceID sets the "sence_id" field if the given value is not nil.
func (su *StarUpdate) SetNillableSenceID(i *int64) *StarUpdate {
	if i != nil {
		su.SetSenceID(*i)
	}
	return su
}

// AddSenceID adds i to the "sence_id" field.
func (su *StarUpdate) AddSenceID(i int64) *StarUpdate {
	su.mutation.AddSenceID(i)
	return su
}

// Mutation returns the StarMutation object of the builder.
func (su *StarUpdate) Mutation() *StarMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StarUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StarUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StarUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StarUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StarUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := star.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	if _, ok := su.mutation.DeletedAt(); !ok && !su.mutation.DeletedAtCleared() {
		v := star.UpdateDefaultDeletedAt()
		su.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StarUpdate) check() error {
	if v, ok := su.mutation.FromRoleID(); ok {
		if err := star.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Star.from_role_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.SecneType(); ok {
		if err := star.SecneTypeValidator(v); err != nil {
			return &ValidationError{Name: "secne_type", err: fmt.Errorf(`ent: validator failed for field "Star.secne_type": %w`, err)}
		}
	}
	if v, ok := su.mutation.SenceID(); ok {
		if err := star.SenceIDValidator(v); err != nil {
			return &ValidationError{Name: "sence_id", err: fmt.Errorf(`ent: validator failed for field "Star.sence_id": %w`, err)}
		}
	}
	return nil
}

func (su *StarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(star.Table, star.Columns, sqlgraph.NewFieldSpec(star.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(star.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(star.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(star.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.FromRoleID(); ok {
		_spec.SetField(star.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedFromRoleID(); ok {
		_spec.AddField(star.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.SecneType(); ok {
		_spec.SetField(star.FieldSecneType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.SenceID(); ok {
		_spec.SetField(star.FieldSenceID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedSenceID(); ok {
		_spec.AddField(star.FieldSenceID, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{star.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StarUpdateOne is the builder for updating a single Star entity.
type StarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StarMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StarUpdateOne) SetUpdatedAt(t time.Time) *StarUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StarUpdateOne) SetDeletedAt(t time.Time) *StarUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StarUpdateOne) ClearDeletedAt() *StarUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetFromRoleID sets the "from_role_id" field.
func (suo *StarUpdateOne) SetFromRoleID(i int64) *StarUpdateOne {
	suo.mutation.ResetFromRoleID()
	suo.mutation.SetFromRoleID(i)
	return suo
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (suo *StarUpdateOne) SetNillableFromRoleID(i *int64) *StarUpdateOne {
	if i != nil {
		suo.SetFromRoleID(*i)
	}
	return suo
}

// AddFromRoleID adds i to the "from_role_id" field.
func (suo *StarUpdateOne) AddFromRoleID(i int64) *StarUpdateOne {
	suo.mutation.AddFromRoleID(i)
	return suo
}

// SetSecneType sets the "secne_type" field.
func (suo *StarUpdateOne) SetSecneType(st star.SecneType) *StarUpdateOne {
	suo.mutation.SetSecneType(st)
	return suo
}

// SetNillableSecneType sets the "secne_type" field if the given value is not nil.
func (suo *StarUpdateOne) SetNillableSecneType(st *star.SecneType) *StarUpdateOne {
	if st != nil {
		suo.SetSecneType(*st)
	}
	return suo
}

// SetSenceID sets the "sence_id" field.
func (suo *StarUpdateOne) SetSenceID(i int64) *StarUpdateOne {
	suo.mutation.ResetSenceID()
	suo.mutation.SetSenceID(i)
	return suo
}

// SetNillableSenceID sets the "sence_id" field if the given value is not nil.
func (suo *StarUpdateOne) SetNillableSenceID(i *int64) *StarUpdateOne {
	if i != nil {
		suo.SetSenceID(*i)
	}
	return suo
}

// AddSenceID adds i to the "sence_id" field.
func (suo *StarUpdateOne) AddSenceID(i int64) *StarUpdateOne {
	suo.mutation.AddSenceID(i)
	return suo
}

// Mutation returns the StarMutation object of the builder.
func (suo *StarUpdateOne) Mutation() *StarMutation {
	return suo.mutation
}

// Where appends a list predicates to the StarUpdate builder.
func (suo *StarUpdateOne) Where(ps ...predicate.Star) *StarUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StarUpdateOne) Select(field string, fields ...string) *StarUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Star entity.
func (suo *StarUpdateOne) Save(ctx context.Context) (*Star, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StarUpdateOne) SaveX(ctx context.Context) *Star {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StarUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StarUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StarUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := star.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	if _, ok := suo.mutation.DeletedAt(); !ok && !suo.mutation.DeletedAtCleared() {
		v := star.UpdateDefaultDeletedAt()
		suo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StarUpdateOne) check() error {
	if v, ok := suo.mutation.FromRoleID(); ok {
		if err := star.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Star.from_role_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.SecneType(); ok {
		if err := star.SecneTypeValidator(v); err != nil {
			return &ValidationError{Name: "secne_type", err: fmt.Errorf(`ent: validator failed for field "Star.secne_type": %w`, err)}
		}
	}
	if v, ok := suo.mutation.SenceID(); ok {
		if err := star.SenceIDValidator(v); err != nil {
			return &ValidationError{Name: "sence_id", err: fmt.Errorf(`ent: validator failed for field "Star.sence_id": %w`, err)}
		}
	}
	return nil
}

func (suo *StarUpdateOne) sqlSave(ctx context.Context) (_node *Star, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(star.Table, star.Columns, sqlgraph.NewFieldSpec(star.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Star.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, star.FieldID)
		for _, f := range fields {
			if !star.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != star.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(star.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(star.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(star.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.FromRoleID(); ok {
		_spec.SetField(star.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedFromRoleID(); ok {
		_spec.AddField(star.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.SecneType(); ok {
		_spec.SetField(star.FieldSecneType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.SenceID(); ok {
		_spec.SetField(star.FieldSenceID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedSenceID(); ok {
		_spec.AddField(star.FieldSenceID, field.TypeInt64, value)
	}
	_node = &Star{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{star.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
