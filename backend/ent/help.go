// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/help"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Help is the model entity for the Help schema.
type Help struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// FromPostID holds the value of the "from_post_id" field.
	FromPostID int64 `json:"from_post_id,omitempty"`
	// AdoptCommentID holds the value of the "adopt_comment_id" field.
	AdoptCommentID *int64 `json:"adopt_comment_id,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Help) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case help.FieldID, help.FieldFromPostID, help.FieldAdoptCommentID:
			values[i] = new(sql.NullInt64)
		case help.FieldCreatedAt, help.FieldUpdatedAt, help.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Help fields.
func (h *Help) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case help.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int64(value.Int64)
		case help.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case help.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		case help.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				h.DeletedAt = new(time.Time)
				*h.DeletedAt = value.Time
			}
		case help.FieldFromPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_post_id", values[i])
			} else if value.Valid {
				h.FromPostID = value.Int64
			}
		case help.FieldAdoptCommentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field adopt_comment_id", values[i])
			} else if value.Valid {
				h.AdoptCommentID = new(int64)
				*h.AdoptCommentID = value.Int64
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Help.
// This includes values selected through modifiers, order, etc.
func (h *Help) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this Help.
// Note that you need to call Help.Unwrap() before calling this method if this Help
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Help) Update() *HelpUpdateOne {
	return NewHelpClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Help entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Help) Unwrap() *Help {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Help is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Help) String() string {
	var builder strings.Builder
	builder.WriteString("Help(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := h.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("from_post_id=")
	builder.WriteString(fmt.Sprintf("%v", h.FromPostID))
	builder.WriteString(", ")
	if v := h.AdoptCommentID; v != nil {
		builder.WriteString("adopt_comment_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Helps is a parsable slice of Help.
type Helps []*Help
