// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/notification"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// NotificationType holds the value of the "notification_type" field.
	NotificationType notification.NotificationType `json:"notification_type,omitempty"`
	// FromRoleID holds the value of the "from_role_id" field.
	FromRoleID int64 `json:"from_role_id,omitempty"`
	// SecneType holds the value of the "secne_type" field.
	SecneType notification.SecneType `json:"secne_type,omitempty"`
	// SenceID holds the value of the "sence_id" field.
	SenceID int64 `json:"sence_id,omitempty"`
	// ToRoleID holds the value of the "to_role_id" field.
	ToRoleID int64 `json:"to_role_id,omitempty"`
	// IsChecked holds the value of the "is_checked" field.
	IsChecked    bool `json:"is_checked,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldIsChecked:
			values[i] = new(sql.NullBool)
		case notification.FieldID, notification.FieldFromRoleID, notification.FieldSenceID, notification.FieldToRoleID:
			values[i] = new(sql.NullInt64)
		case notification.FieldNotificationType, notification.FieldSecneType:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedAt, notification.FieldUpdatedAt, notification.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int64(value.Int64)
		case notification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case notification.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = new(time.Time)
				*n.DeletedAt = value.Time
			}
		case notification.FieldNotificationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notification_type", values[i])
			} else if value.Valid {
				n.NotificationType = notification.NotificationType(value.String)
			}
		case notification.FieldFromRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_role_id", values[i])
			} else if value.Valid {
				n.FromRoleID = value.Int64
			}
		case notification.FieldSecneType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secne_type", values[i])
			} else if value.Valid {
				n.SecneType = notification.SecneType(value.String)
			}
		case notification.FieldSenceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sence_id", values[i])
			} else if value.Valid {
				n.SenceID = value.Int64
			}
		case notification.FieldToRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_role_id", values[i])
			} else if value.Valid {
				n.ToRoleID = value.Int64
			}
		case notification.FieldIsChecked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_checked", values[i])
			} else if value.Valid {
				n.IsChecked = value.Bool
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Notification.
// This includes values selected through modifiers, order, etc.
func (n *Notification) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := n.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("notification_type=")
	builder.WriteString(fmt.Sprintf("%v", n.NotificationType))
	builder.WriteString(", ")
	builder.WriteString("from_role_id=")
	builder.WriteString(fmt.Sprintf("%v", n.FromRoleID))
	builder.WriteString(", ")
	builder.WriteString("secne_type=")
	builder.WriteString(fmt.Sprintf("%v", n.SecneType))
	builder.WriteString(", ")
	builder.WriteString("sence_id=")
	builder.WriteString(fmt.Sprintf("%v", n.SenceID))
	builder.WriteString(", ")
	builder.WriteString("to_role_id=")
	builder.WriteString(fmt.Sprintf("%v", n.ToRoleID))
	builder.WriteString(", ")
	builder.WriteString("is_checked=")
	builder.WriteString(fmt.Sprintf("%v", n.IsChecked))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification
