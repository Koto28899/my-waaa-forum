// Code generated by ent, DO NOT EDIT.

package star

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Star {
	return predicate.Star(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Star {
	return predicate.Star(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Star {
	return predicate.Star(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Star {
	return predicate.Star(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Star {
	return predicate.Star(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Star {
	return predicate.Star(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Star {
	return predicate.Star(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldDeletedAt, v))
}

// FromRoleID applies equality check predicate on the "from_role_id" field. It's identical to FromRoleIDEQ.
func FromRoleID(v int64) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldFromRoleID, v))
}

// SenceID applies equality check predicate on the "sence_id" field. It's identical to SenceIDEQ.
func SenceID(v int64) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldSenceID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Star {
	return predicate.Star(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Star {
	return predicate.Star(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Star {
	return predicate.Star(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Star {
	return predicate.Star(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Star {
	return predicate.Star(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Star {
	return predicate.Star(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Star {
	return predicate.Star(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Star {
	return predicate.Star(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Star {
	return predicate.Star(sql.FieldNotNull(FieldDeletedAt))
}

// FromRoleIDEQ applies the EQ predicate on the "from_role_id" field.
func FromRoleIDEQ(v int64) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldFromRoleID, v))
}

// FromRoleIDNEQ applies the NEQ predicate on the "from_role_id" field.
func FromRoleIDNEQ(v int64) predicate.Star {
	return predicate.Star(sql.FieldNEQ(FieldFromRoleID, v))
}

// FromRoleIDIn applies the In predicate on the "from_role_id" field.
func FromRoleIDIn(vs ...int64) predicate.Star {
	return predicate.Star(sql.FieldIn(FieldFromRoleID, vs...))
}

// FromRoleIDNotIn applies the NotIn predicate on the "from_role_id" field.
func FromRoleIDNotIn(vs ...int64) predicate.Star {
	return predicate.Star(sql.FieldNotIn(FieldFromRoleID, vs...))
}

// FromRoleIDGT applies the GT predicate on the "from_role_id" field.
func FromRoleIDGT(v int64) predicate.Star {
	return predicate.Star(sql.FieldGT(FieldFromRoleID, v))
}

// FromRoleIDGTE applies the GTE predicate on the "from_role_id" field.
func FromRoleIDGTE(v int64) predicate.Star {
	return predicate.Star(sql.FieldGTE(FieldFromRoleID, v))
}

// FromRoleIDLT applies the LT predicate on the "from_role_id" field.
func FromRoleIDLT(v int64) predicate.Star {
	return predicate.Star(sql.FieldLT(FieldFromRoleID, v))
}

// FromRoleIDLTE applies the LTE predicate on the "from_role_id" field.
func FromRoleIDLTE(v int64) predicate.Star {
	return predicate.Star(sql.FieldLTE(FieldFromRoleID, v))
}

// SecneTypeEQ applies the EQ predicate on the "secne_type" field.
func SecneTypeEQ(v SecneType) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldSecneType, v))
}

// SecneTypeNEQ applies the NEQ predicate on the "secne_type" field.
func SecneTypeNEQ(v SecneType) predicate.Star {
	return predicate.Star(sql.FieldNEQ(FieldSecneType, v))
}

// SecneTypeIn applies the In predicate on the "secne_type" field.
func SecneTypeIn(vs ...SecneType) predicate.Star {
	return predicate.Star(sql.FieldIn(FieldSecneType, vs...))
}

// SecneTypeNotIn applies the NotIn predicate on the "secne_type" field.
func SecneTypeNotIn(vs ...SecneType) predicate.Star {
	return predicate.Star(sql.FieldNotIn(FieldSecneType, vs...))
}

// SenceIDEQ applies the EQ predicate on the "sence_id" field.
func SenceIDEQ(v int64) predicate.Star {
	return predicate.Star(sql.FieldEQ(FieldSenceID, v))
}

// SenceIDNEQ applies the NEQ predicate on the "sence_id" field.
func SenceIDNEQ(v int64) predicate.Star {
	return predicate.Star(sql.FieldNEQ(FieldSenceID, v))
}

// SenceIDIn applies the In predicate on the "sence_id" field.
func SenceIDIn(vs ...int64) predicate.Star {
	return predicate.Star(sql.FieldIn(FieldSenceID, vs...))
}

// SenceIDNotIn applies the NotIn predicate on the "sence_id" field.
func SenceIDNotIn(vs ...int64) predicate.Star {
	return predicate.Star(sql.FieldNotIn(FieldSenceID, vs...))
}

// SenceIDGT applies the GT predicate on the "sence_id" field.
func SenceIDGT(v int64) predicate.Star {
	return predicate.Star(sql.FieldGT(FieldSenceID, v))
}

// SenceIDGTE applies the GTE predicate on the "sence_id" field.
func SenceIDGTE(v int64) predicate.Star {
	return predicate.Star(sql.FieldGTE(FieldSenceID, v))
}

// SenceIDLT applies the LT predicate on the "sence_id" field.
func SenceIDLT(v int64) predicate.Star {
	return predicate.Star(sql.FieldLT(FieldSenceID, v))
}

// SenceIDLTE applies the LTE predicate on the "sence_id" field.
func SenceIDLTE(v int64) predicate.Star {
	return predicate.Star(sql.FieldLTE(FieldSenceID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Star) predicate.Star {
	return predicate.Star(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Star) predicate.Star {
	return predicate.Star(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Star) predicate.Star {
	return predicate.Star(sql.NotPredicates(p))
}
