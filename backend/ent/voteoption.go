// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/voteoption"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VoteOption is the model entity for the VoteOption schema.
type VoteOption struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// VoteID holds the value of the "vote_id" field.
	VoteID int64 `json:"vote_id,omitempty"`
	// Info holds the value of the "info" field.
	Info string `json:"info,omitempty"`
	// Count holds the value of the "count" field.
	Count        int64 `json:"count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VoteOption) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case voteoption.FieldID, voteoption.FieldVoteID, voteoption.FieldCount:
			values[i] = new(sql.NullInt64)
		case voteoption.FieldInfo:
			values[i] = new(sql.NullString)
		case voteoption.FieldCreatedAt, voteoption.FieldUpdatedAt, voteoption.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VoteOption fields.
func (vo *VoteOption) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case voteoption.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vo.ID = int64(value.Int64)
		case voteoption.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vo.CreatedAt = value.Time
			}
		case voteoption.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vo.UpdatedAt = value.Time
			}
		case voteoption.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vo.DeletedAt = new(time.Time)
				*vo.DeletedAt = value.Time
			}
		case voteoption.FieldVoteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vote_id", values[i])
			} else if value.Valid {
				vo.VoteID = value.Int64
			}
		case voteoption.FieldInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value.Valid {
				vo.Info = value.String
			}
		case voteoption.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				vo.Count = value.Int64
			}
		default:
			vo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VoteOption.
// This includes values selected through modifiers, order, etc.
func (vo *VoteOption) Value(name string) (ent.Value, error) {
	return vo.selectValues.Get(name)
}

// Update returns a builder for updating this VoteOption.
// Note that you need to call VoteOption.Unwrap() before calling this method if this VoteOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (vo *VoteOption) Update() *VoteOptionUpdateOne {
	return NewVoteOptionClient(vo.config).UpdateOne(vo)
}

// Unwrap unwraps the VoteOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vo *VoteOption) Unwrap() *VoteOption {
	_tx, ok := vo.config.driver.(*txDriver)
	if !ok {
		panic("ent: VoteOption is not a transactional entity")
	}
	vo.config.driver = _tx.drv
	return vo
}

// String implements the fmt.Stringer.
func (vo *VoteOption) String() string {
	var builder strings.Builder
	builder.WriteString("VoteOption(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vo.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vo.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := vo.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("vote_id=")
	builder.WriteString(fmt.Sprintf("%v", vo.VoteID))
	builder.WriteString(", ")
	builder.WriteString("info=")
	builder.WriteString(vo.Info)
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", vo.Count))
	builder.WriteByte(')')
	return builder.String()
}

// VoteOptions is a parsable slice of VoteOption.
type VoteOptions []*VoteOption
