// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/section"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SectionUpdate is the builder for updating Section entities.
type SectionUpdate struct {
	config
	hooks    []Hook
	mutation *SectionMutation
}

// Where appends a list predicates to the SectionUpdate builder.
func (su *SectionUpdate) Where(ps ...predicate.Section) *SectionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SectionUpdate) SetUpdatedAt(t time.Time) *SectionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SectionUpdate) SetDeletedAt(t time.Time) *SectionUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SectionUpdate) ClearDeletedAt() *SectionUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetSectionName sets the "section_name" field.
func (su *SectionUpdate) SetSectionName(s string) *SectionUpdate {
	su.mutation.SetSectionName(s)
	return su
}

// SetNillableSectionName sets the "section_name" field if the given value is not nil.
func (su *SectionUpdate) SetNillableSectionName(s *string) *SectionUpdate {
	if s != nil {
		su.SetSectionName(*s)
	}
	return su
}

// SetStatement sets the "statement" field.
func (su *SectionUpdate) SetStatement(s string) *SectionUpdate {
	su.mutation.SetStatement(s)
	return su
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (su *SectionUpdate) SetNillableStatement(s *string) *SectionUpdate {
	if s != nil {
		su.SetStatement(*s)
	}
	return su
}

// ClearStatement clears the value of the "statement" field.
func (su *SectionUpdate) ClearStatement() *SectionUpdate {
	su.mutation.ClearStatement()
	return su
}

// SetManagerID sets the "manager_id" field.
func (su *SectionUpdate) SetManagerID(i int64) *SectionUpdate {
	su.mutation.ResetManagerID()
	su.mutation.SetManagerID(i)
	return su
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (su *SectionUpdate) SetNillableManagerID(i *int64) *SectionUpdate {
	if i != nil {
		su.SetManagerID(*i)
	}
	return su
}

// AddManagerID adds i to the "manager_id" field.
func (su *SectionUpdate) AddManagerID(i int64) *SectionUpdate {
	su.mutation.AddManagerID(i)
	return su
}

// Mutation returns the SectionMutation object of the builder.
func (su *SectionUpdate) Mutation() *SectionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SectionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SectionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SectionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SectionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SectionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := section.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	if _, ok := su.mutation.DeletedAt(); !ok && !su.mutation.DeletedAtCleared() {
		v := section.UpdateDefaultDeletedAt()
		su.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SectionUpdate) check() error {
	if v, ok := su.mutation.SectionName(); ok {
		if err := section.SectionNameValidator(v); err != nil {
			return &ValidationError{Name: "section_name", err: fmt.Errorf(`ent: validator failed for field "Section.section_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Statement(); ok {
		if err := section.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "Section.statement": %w`, err)}
		}
	}
	if v, ok := su.mutation.ManagerID(); ok {
		if err := section.ManagerIDValidator(v); err != nil {
			return &ValidationError{Name: "manager_id", err: fmt.Errorf(`ent: validator failed for field "Section.manager_id": %w`, err)}
		}
	}
	return nil
}

func (su *SectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(section.Table, section.Columns, sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(section.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(section.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(section.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.SectionName(); ok {
		_spec.SetField(section.FieldSectionName, field.TypeString, value)
	}
	if value, ok := su.mutation.Statement(); ok {
		_spec.SetField(section.FieldStatement, field.TypeString, value)
	}
	if su.mutation.StatementCleared() {
		_spec.ClearField(section.FieldStatement, field.TypeString)
	}
	if value, ok := su.mutation.ManagerID(); ok {
		_spec.SetField(section.FieldManagerID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedManagerID(); ok {
		_spec.AddField(section.FieldManagerID, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SectionUpdateOne is the builder for updating a single Section entity.
type SectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SectionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SectionUpdateOne) SetUpdatedAt(t time.Time) *SectionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SectionUpdateOne) SetDeletedAt(t time.Time) *SectionUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SectionUpdateOne) ClearDeletedAt() *SectionUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetSectionName sets the "section_name" field.
func (suo *SectionUpdateOne) SetSectionName(s string) *SectionUpdateOne {
	suo.mutation.SetSectionName(s)
	return suo
}

// SetNillableSectionName sets the "section_name" field if the given value is not nil.
func (suo *SectionUpdateOne) SetNillableSectionName(s *string) *SectionUpdateOne {
	if s != nil {
		suo.SetSectionName(*s)
	}
	return suo
}

// SetStatement sets the "statement" field.
func (suo *SectionUpdateOne) SetStatement(s string) *SectionUpdateOne {
	suo.mutation.SetStatement(s)
	return suo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (suo *SectionUpdateOne) SetNillableStatement(s *string) *SectionUpdateOne {
	if s != nil {
		suo.SetStatement(*s)
	}
	return suo
}

// ClearStatement clears the value of the "statement" field.
func (suo *SectionUpdateOne) ClearStatement() *SectionUpdateOne {
	suo.mutation.ClearStatement()
	return suo
}

// SetManagerID sets the "manager_id" field.
func (suo *SectionUpdateOne) SetManagerID(i int64) *SectionUpdateOne {
	suo.mutation.ResetManagerID()
	suo.mutation.SetManagerID(i)
	return suo
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (suo *SectionUpdateOne) SetNillableManagerID(i *int64) *SectionUpdateOne {
	if i != nil {
		suo.SetManagerID(*i)
	}
	return suo
}

// AddManagerID adds i to the "manager_id" field.
func (suo *SectionUpdateOne) AddManagerID(i int64) *SectionUpdateOne {
	suo.mutation.AddManagerID(i)
	return suo
}

// Mutation returns the SectionMutation object of the builder.
func (suo *SectionUpdateOne) Mutation() *SectionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SectionUpdate builder.
func (suo *SectionUpdateOne) Where(ps ...predicate.Section) *SectionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SectionUpdateOne) Select(field string, fields ...string) *SectionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Section entity.
func (suo *SectionUpdateOne) Save(ctx context.Context) (*Section, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SectionUpdateOne) SaveX(ctx context.Context) *Section {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SectionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SectionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SectionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := section.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	if _, ok := suo.mutation.DeletedAt(); !ok && !suo.mutation.DeletedAtCleared() {
		v := section.UpdateDefaultDeletedAt()
		suo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SectionUpdateOne) check() error {
	if v, ok := suo.mutation.SectionName(); ok {
		if err := section.SectionNameValidator(v); err != nil {
			return &ValidationError{Name: "section_name", err: fmt.Errorf(`ent: validator failed for field "Section.section_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Statement(); ok {
		if err := section.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "Section.statement": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ManagerID(); ok {
		if err := section.ManagerIDValidator(v); err != nil {
			return &ValidationError{Name: "manager_id", err: fmt.Errorf(`ent: validator failed for field "Section.manager_id": %w`, err)}
		}
	}
	return nil
}

func (suo *SectionUpdateOne) sqlSave(ctx context.Context) (_node *Section, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(section.Table, section.Columns, sqlgraph.NewFieldSpec(section.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Section.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, section.FieldID)
		for _, f := range fields {
			if !section.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != section.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(section.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(section.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(section.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.SectionName(); ok {
		_spec.SetField(section.FieldSectionName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Statement(); ok {
		_spec.SetField(section.FieldStatement, field.TypeString, value)
	}
	if suo.mutation.StatementCleared() {
		_spec.ClearField(section.FieldStatement, field.TypeString)
	}
	if value, ok := suo.mutation.ManagerID(); ok {
		_spec.SetField(section.FieldManagerID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedManagerID(); ok {
		_spec.AddField(section.FieldManagerID, field.TypeInt64, value)
	}
	_node = &Section{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
