// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/voteevent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteEventCreate is the builder for creating a VoteEvent entity.
type VoteEventCreate struct {
	config
	mutation *VoteEventMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vec *VoteEventCreate) SetCreatedAt(t time.Time) *VoteEventCreate {
	vec.mutation.SetCreatedAt(t)
	return vec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vec *VoteEventCreate) SetNillableCreatedAt(t *time.Time) *VoteEventCreate {
	if t != nil {
		vec.SetCreatedAt(*t)
	}
	return vec
}

// SetUpdatedAt sets the "updated_at" field.
func (vec *VoteEventCreate) SetUpdatedAt(t time.Time) *VoteEventCreate {
	vec.mutation.SetUpdatedAt(t)
	return vec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vec *VoteEventCreate) SetNillableUpdatedAt(t *time.Time) *VoteEventCreate {
	if t != nil {
		vec.SetUpdatedAt(*t)
	}
	return vec
}

// SetDeletedAt sets the "deleted_at" field.
func (vec *VoteEventCreate) SetDeletedAt(t time.Time) *VoteEventCreate {
	vec.mutation.SetDeletedAt(t)
	return vec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vec *VoteEventCreate) SetNillableDeletedAt(t *time.Time) *VoteEventCreate {
	if t != nil {
		vec.SetDeletedAt(*t)
	}
	return vec
}

// SetFromRoleID sets the "from_role_id" field.
func (vec *VoteEventCreate) SetFromRoleID(i int64) *VoteEventCreate {
	vec.mutation.SetFromRoleID(i)
	return vec
}

// SetToVoteID sets the "to_vote_id" field.
func (vec *VoteEventCreate) SetToVoteID(i int64) *VoteEventCreate {
	vec.mutation.SetToVoteID(i)
	return vec
}

// SetToVoteOption sets the "to_vote_option" field.
func (vec *VoteEventCreate) SetToVoteOption(i int64) *VoteEventCreate {
	vec.mutation.SetToVoteOption(i)
	return vec
}

// SetID sets the "id" field.
func (vec *VoteEventCreate) SetID(i int64) *VoteEventCreate {
	vec.mutation.SetID(i)
	return vec
}

// Mutation returns the VoteEventMutation object of the builder.
func (vec *VoteEventCreate) Mutation() *VoteEventMutation {
	return vec.mutation
}

// Save creates the VoteEvent in the database.
func (vec *VoteEventCreate) Save(ctx context.Context) (*VoteEvent, error) {
	vec.defaults()
	return withHooks(ctx, vec.sqlSave, vec.mutation, vec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vec *VoteEventCreate) SaveX(ctx context.Context) *VoteEvent {
	v, err := vec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vec *VoteEventCreate) Exec(ctx context.Context) error {
	_, err := vec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vec *VoteEventCreate) ExecX(ctx context.Context) {
	if err := vec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vec *VoteEventCreate) defaults() {
	if _, ok := vec.mutation.CreatedAt(); !ok {
		v := voteevent.DefaultCreatedAt()
		vec.mutation.SetCreatedAt(v)
	}
	if _, ok := vec.mutation.UpdatedAt(); !ok {
		v := voteevent.DefaultUpdatedAt()
		vec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vec *VoteEventCreate) check() error {
	if _, ok := vec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VoteEvent.created_at"`)}
	}
	if _, ok := vec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VoteEvent.updated_at"`)}
	}
	if _, ok := vec.mutation.FromRoleID(); !ok {
		return &ValidationError{Name: "from_role_id", err: errors.New(`ent: missing required field "VoteEvent.from_role_id"`)}
	}
	if v, ok := vec.mutation.FromRoleID(); ok {
		if err := voteevent.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.from_role_id": %w`, err)}
		}
	}
	if _, ok := vec.mutation.ToVoteID(); !ok {
		return &ValidationError{Name: "to_vote_id", err: errors.New(`ent: missing required field "VoteEvent.to_vote_id"`)}
	}
	if v, ok := vec.mutation.ToVoteID(); ok {
		if err := voteevent.ToVoteIDValidator(v); err != nil {
			return &ValidationError{Name: "to_vote_id", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.to_vote_id": %w`, err)}
		}
	}
	if _, ok := vec.mutation.ToVoteOption(); !ok {
		return &ValidationError{Name: "to_vote_option", err: errors.New(`ent: missing required field "VoteEvent.to_vote_option"`)}
	}
	if v, ok := vec.mutation.ToVoteOption(); ok {
		if err := voteevent.ToVoteOptionValidator(v); err != nil {
			return &ValidationError{Name: "to_vote_option", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.to_vote_option": %w`, err)}
		}
	}
	if v, ok := vec.mutation.ID(); ok {
		if err := voteevent.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.id": %w`, err)}
		}
	}
	return nil
}

func (vec *VoteEventCreate) sqlSave(ctx context.Context) (*VoteEvent, error) {
	if err := vec.check(); err != nil {
		return nil, err
	}
	_node, _spec := vec.createSpec()
	if err := sqlgraph.CreateNode(ctx, vec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	vec.mutation.id = &_node.ID
	vec.mutation.done = true
	return _node, nil
}

func (vec *VoteEventCreate) createSpec() (*VoteEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &VoteEvent{config: vec.config}
		_spec = sqlgraph.NewCreateSpec(voteevent.Table, sqlgraph.NewFieldSpec(voteevent.FieldID, field.TypeInt64))
	)
	if id, ok := vec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vec.mutation.CreatedAt(); ok {
		_spec.SetField(voteevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vec.mutation.UpdatedAt(); ok {
		_spec.SetField(voteevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vec.mutation.DeletedAt(); ok {
		_spec.SetField(voteevent.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vec.mutation.FromRoleID(); ok {
		_spec.SetField(voteevent.FieldFromRoleID, field.TypeInt64, value)
		_node.FromRoleID = value
	}
	if value, ok := vec.mutation.ToVoteID(); ok {
		_spec.SetField(voteevent.FieldToVoteID, field.TypeInt64, value)
		_node.ToVoteID = value
	}
	if value, ok := vec.mutation.ToVoteOption(); ok {
		_spec.SetField(voteevent.FieldToVoteOption, field.TypeInt64, value)
		_node.ToVoteOption = value
	}
	return _node, _spec
}

// VoteEventCreateBulk is the builder for creating many VoteEvent entities in bulk.
type VoteEventCreateBulk struct {
	config
	err      error
	builders []*VoteEventCreate
}

// Save creates the VoteEvent entities in the database.
func (vecb *VoteEventCreateBulk) Save(ctx context.Context) ([]*VoteEvent, error) {
	if vecb.err != nil {
		return nil, vecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vecb.builders))
	nodes := make([]*VoteEvent, len(vecb.builders))
	mutators := make([]Mutator, len(vecb.builders))
	for i := range vecb.builders {
		func(i int, root context.Context) {
			builder := vecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoteEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vecb *VoteEventCreateBulk) SaveX(ctx context.Context) []*VoteEvent {
	v, err := vecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vecb *VoteEventCreateBulk) Exec(ctx context.Context) error {
	_, err := vecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vecb *VoteEventCreateBulk) ExecX(ctx context.Context) {
	if err := vecb.Exec(ctx); err != nil {
		panic(err)
	}
}
