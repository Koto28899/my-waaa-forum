// Code generated by ent, DO NOT EDIT.

package notification

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNotificationType holds the string denoting the notification_type field in the database.
	FieldNotificationType = "notification_type"
	// FieldFromRoleID holds the string denoting the from_role_id field in the database.
	FieldFromRoleID = "from_role_id"
	// FieldSecneType holds the string denoting the secne_type field in the database.
	FieldSecneType = "secne_type"
	// FieldSenceID holds the string denoting the sence_id field in the database.
	FieldSenceID = "sence_id"
	// FieldToRoleID holds the string denoting the to_role_id field in the database.
	FieldToRoleID = "to_role_id"
	// FieldIsChecked holds the string denoting the is_checked field in the database.
	FieldIsChecked = "is_checked"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldNotificationType,
	FieldFromRoleID,
	FieldSecneType,
	FieldSenceID,
	FieldToRoleID,
	FieldIsChecked,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdateDefaultDeletedAt holds the default value on update for the "deleted_at" field.
	UpdateDefaultDeletedAt func() time.Time
	// FromRoleIDValidator is a validator for the "from_role_id" field. It is called by the builders before save.
	FromRoleIDValidator func(int64) error
	// SenceIDValidator is a validator for the "sence_id" field. It is called by the builders before save.
	SenceIDValidator func(int64) error
	// ToRoleIDValidator is a validator for the "to_role_id" field. It is called by the builders before save.
	ToRoleIDValidator func(int64) error
	// DefaultIsChecked holds the default value on creation for the "is_checked" field.
	DefaultIsChecked bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// NotificationType defines the type for the "notification_type" enum field.
type NotificationType string

// NotificationType values.
const (
	NotificationTypeAdopt     NotificationType = "adopt"
	NotificationTypeReply     NotificationType = "reply"
	NotificationTypeLike      NotificationType = "like"
	NotificationTypeAt        NotificationType = "at"
	NotificationTypeFromAdmin NotificationType = "from_admin"
)

func (nt NotificationType) String() string {
	return string(nt)
}

// NotificationTypeValidator is a validator for the "notification_type" field enum values. It is called by the builders before save.
func NotificationTypeValidator(nt NotificationType) error {
	switch nt {
	case NotificationTypeAdopt, NotificationTypeReply, NotificationTypeLike, NotificationTypeAt, NotificationTypeFromAdmin:
		return nil
	default:
		return fmt.Errorf("notification: invalid enum value for notification_type field: %q", nt)
	}
}

// SecneType defines the type for the "secne_type" enum field.
type SecneType string

// SecneType values.
const (
	SecneTypePost    SecneType = "post"
	SecneTypeComment SecneType = "comment"
	SecneTypeReply   SecneType = "reply"
)

func (st SecneType) String() string {
	return string(st)
}

// SecneTypeValidator is a validator for the "secne_type" field enum values. It is called by the builders before save.
func SecneTypeValidator(st SecneType) error {
	switch st {
	case SecneTypePost, SecneTypeComment, SecneTypeReply:
		return nil
	default:
		return fmt.Errorf("notification: invalid enum value for secne_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNotificationType orders the results by the notification_type field.
func ByNotificationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationType, opts...).ToFunc()
}

// ByFromRoleID orders the results by the from_role_id field.
func ByFromRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromRoleID, opts...).ToFunc()
}

// BySecneType orders the results by the secne_type field.
func BySecneType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecneType, opts...).ToFunc()
}

// BySenceID orders the results by the sence_id field.
func BySenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenceID, opts...).ToFunc()
}

// ByToRoleID orders the results by the to_role_id field.
func ByToRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToRoleID, opts...).ToFunc()
}

// ByIsChecked orders the results by the is_checked field.
func ByIsChecked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsChecked, opts...).ToFunc()
}
