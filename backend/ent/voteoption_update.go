// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/voteoption"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteOptionUpdate is the builder for updating VoteOption entities.
type VoteOptionUpdate struct {
	config
	hooks    []Hook
	mutation *VoteOptionMutation
}

// Where appends a list predicates to the VoteOptionUpdate builder.
func (vou *VoteOptionUpdate) Where(ps ...predicate.VoteOption) *VoteOptionUpdate {
	vou.mutation.Where(ps...)
	return vou
}

// SetUpdatedAt sets the "updated_at" field.
func (vou *VoteOptionUpdate) SetUpdatedAt(t time.Time) *VoteOptionUpdate {
	vou.mutation.SetUpdatedAt(t)
	return vou
}

// SetDeletedAt sets the "deleted_at" field.
func (vou *VoteOptionUpdate) SetDeletedAt(t time.Time) *VoteOptionUpdate {
	vou.mutation.SetDeletedAt(t)
	return vou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vou *VoteOptionUpdate) ClearDeletedAt() *VoteOptionUpdate {
	vou.mutation.ClearDeletedAt()
	return vou
}

// SetVoteID sets the "vote_id" field.
func (vou *VoteOptionUpdate) SetVoteID(i int64) *VoteOptionUpdate {
	vou.mutation.ResetVoteID()
	vou.mutation.SetVoteID(i)
	return vou
}

// SetNillableVoteID sets the "vote_id" field if the given value is not nil.
func (vou *VoteOptionUpdate) SetNillableVoteID(i *int64) *VoteOptionUpdate {
	if i != nil {
		vou.SetVoteID(*i)
	}
	return vou
}

// AddVoteID adds i to the "vote_id" field.
func (vou *VoteOptionUpdate) AddVoteID(i int64) *VoteOptionUpdate {
	vou.mutation.AddVoteID(i)
	return vou
}

// SetInfo sets the "info" field.
func (vou *VoteOptionUpdate) SetInfo(s string) *VoteOptionUpdate {
	vou.mutation.SetInfo(s)
	return vou
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (vou *VoteOptionUpdate) SetNillableInfo(s *string) *VoteOptionUpdate {
	if s != nil {
		vou.SetInfo(*s)
	}
	return vou
}

// SetCount sets the "count" field.
func (vou *VoteOptionUpdate) SetCount(i int64) *VoteOptionUpdate {
	vou.mutation.ResetCount()
	vou.mutation.SetCount(i)
	return vou
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (vou *VoteOptionUpdate) SetNillableCount(i *int64) *VoteOptionUpdate {
	if i != nil {
		vou.SetCount(*i)
	}
	return vou
}

// AddCount adds i to the "count" field.
func (vou *VoteOptionUpdate) AddCount(i int64) *VoteOptionUpdate {
	vou.mutation.AddCount(i)
	return vou
}

// Mutation returns the VoteOptionMutation object of the builder.
func (vou *VoteOptionUpdate) Mutation() *VoteOptionMutation {
	return vou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vou *VoteOptionUpdate) Save(ctx context.Context) (int, error) {
	vou.defaults()
	return withHooks(ctx, vou.sqlSave, vou.mutation, vou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vou *VoteOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := vou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vou *VoteOptionUpdate) Exec(ctx context.Context) error {
	_, err := vou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vou *VoteOptionUpdate) ExecX(ctx context.Context) {
	if err := vou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vou *VoteOptionUpdate) defaults() {
	if _, ok := vou.mutation.UpdatedAt(); !ok {
		v := voteoption.UpdateDefaultUpdatedAt()
		vou.mutation.SetUpdatedAt(v)
	}
	if _, ok := vou.mutation.DeletedAt(); !ok && !vou.mutation.DeletedAtCleared() {
		v := voteoption.UpdateDefaultDeletedAt()
		vou.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vou *VoteOptionUpdate) check() error {
	if v, ok := vou.mutation.VoteID(); ok {
		if err := voteoption.VoteIDValidator(v); err != nil {
			return &ValidationError{Name: "vote_id", err: fmt.Errorf(`ent: validator failed for field "VoteOption.vote_id": %w`, err)}
		}
	}
	if v, ok := vou.mutation.Info(); ok {
		if err := voteoption.InfoValidator(v); err != nil {
			return &ValidationError{Name: "info", err: fmt.Errorf(`ent: validator failed for field "VoteOption.info": %w`, err)}
		}
	}
	if v, ok := vou.mutation.Count(); ok {
		if err := voteoption.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "VoteOption.count": %w`, err)}
		}
	}
	return nil
}

func (vou *VoteOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(voteoption.Table, voteoption.Columns, sqlgraph.NewFieldSpec(voteoption.FieldID, field.TypeInt64))
	if ps := vou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vou.mutation.UpdatedAt(); ok {
		_spec.SetField(voteoption.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vou.mutation.DeletedAt(); ok {
		_spec.SetField(voteoption.FieldDeletedAt, field.TypeTime, value)
	}
	if vou.mutation.DeletedAtCleared() {
		_spec.ClearField(voteoption.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vou.mutation.VoteID(); ok {
		_spec.SetField(voteoption.FieldVoteID, field.TypeInt64, value)
	}
	if value, ok := vou.mutation.AddedVoteID(); ok {
		_spec.AddField(voteoption.FieldVoteID, field.TypeInt64, value)
	}
	if value, ok := vou.mutation.Info(); ok {
		_spec.SetField(voteoption.FieldInfo, field.TypeString, value)
	}
	if value, ok := vou.mutation.Count(); ok {
		_spec.SetField(voteoption.FieldCount, field.TypeInt64, value)
	}
	if value, ok := vou.mutation.AddedCount(); ok {
		_spec.AddField(voteoption.FieldCount, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voteoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vou.mutation.done = true
	return n, nil
}

// VoteOptionUpdateOne is the builder for updating a single VoteOption entity.
type VoteOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteOptionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vouo *VoteOptionUpdateOne) SetUpdatedAt(t time.Time) *VoteOptionUpdateOne {
	vouo.mutation.SetUpdatedAt(t)
	return vouo
}

// SetDeletedAt sets the "deleted_at" field.
func (vouo *VoteOptionUpdateOne) SetDeletedAt(t time.Time) *VoteOptionUpdateOne {
	vouo.mutation.SetDeletedAt(t)
	return vouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vouo *VoteOptionUpdateOne) ClearDeletedAt() *VoteOptionUpdateOne {
	vouo.mutation.ClearDeletedAt()
	return vouo
}

// SetVoteID sets the "vote_id" field.
func (vouo *VoteOptionUpdateOne) SetVoteID(i int64) *VoteOptionUpdateOne {
	vouo.mutation.ResetVoteID()
	vouo.mutation.SetVoteID(i)
	return vouo
}

// SetNillableVoteID sets the "vote_id" field if the given value is not nil.
func (vouo *VoteOptionUpdateOne) SetNillableVoteID(i *int64) *VoteOptionUpdateOne {
	if i != nil {
		vouo.SetVoteID(*i)
	}
	return vouo
}

// AddVoteID adds i to the "vote_id" field.
func (vouo *VoteOptionUpdateOne) AddVoteID(i int64) *VoteOptionUpdateOne {
	vouo.mutation.AddVoteID(i)
	return vouo
}

// SetInfo sets the "info" field.
func (vouo *VoteOptionUpdateOne) SetInfo(s string) *VoteOptionUpdateOne {
	vouo.mutation.SetInfo(s)
	return vouo
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (vouo *VoteOptionUpdateOne) SetNillableInfo(s *string) *VoteOptionUpdateOne {
	if s != nil {
		vouo.SetInfo(*s)
	}
	return vouo
}

// SetCount sets the "count" field.
func (vouo *VoteOptionUpdateOne) SetCount(i int64) *VoteOptionUpdateOne {
	vouo.mutation.ResetCount()
	vouo.mutation.SetCount(i)
	return vouo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (vouo *VoteOptionUpdateOne) SetNillableCount(i *int64) *VoteOptionUpdateOne {
	if i != nil {
		vouo.SetCount(*i)
	}
	return vouo
}

// AddCount adds i to the "count" field.
func (vouo *VoteOptionUpdateOne) AddCount(i int64) *VoteOptionUpdateOne {
	vouo.mutation.AddCount(i)
	return vouo
}

// Mutation returns the VoteOptionMutation object of the builder.
func (vouo *VoteOptionUpdateOne) Mutation() *VoteOptionMutation {
	return vouo.mutation
}

// Where appends a list predicates to the VoteOptionUpdate builder.
func (vouo *VoteOptionUpdateOne) Where(ps ...predicate.VoteOption) *VoteOptionUpdateOne {
	vouo.mutation.Where(ps...)
	return vouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vouo *VoteOptionUpdateOne) Select(field string, fields ...string) *VoteOptionUpdateOne {
	vouo.fields = append([]string{field}, fields...)
	return vouo
}

// Save executes the query and returns the updated VoteOption entity.
func (vouo *VoteOptionUpdateOne) Save(ctx context.Context) (*VoteOption, error) {
	vouo.defaults()
	return withHooks(ctx, vouo.sqlSave, vouo.mutation, vouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vouo *VoteOptionUpdateOne) SaveX(ctx context.Context) *VoteOption {
	node, err := vouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vouo *VoteOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := vouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vouo *VoteOptionUpdateOne) ExecX(ctx context.Context) {
	if err := vouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vouo *VoteOptionUpdateOne) defaults() {
	if _, ok := vouo.mutation.UpdatedAt(); !ok {
		v := voteoption.UpdateDefaultUpdatedAt()
		vouo.mutation.SetUpdatedAt(v)
	}
	if _, ok := vouo.mutation.DeletedAt(); !ok && !vouo.mutation.DeletedAtCleared() {
		v := voteoption.UpdateDefaultDeletedAt()
		vouo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vouo *VoteOptionUpdateOne) check() error {
	if v, ok := vouo.mutation.VoteID(); ok {
		if err := voteoption.VoteIDValidator(v); err != nil {
			return &ValidationError{Name: "vote_id", err: fmt.Errorf(`ent: validator failed for field "VoteOption.vote_id": %w`, err)}
		}
	}
	if v, ok := vouo.mutation.Info(); ok {
		if err := voteoption.InfoValidator(v); err != nil {
			return &ValidationError{Name: "info", err: fmt.Errorf(`ent: validator failed for field "VoteOption.info": %w`, err)}
		}
	}
	if v, ok := vouo.mutation.Count(); ok {
		if err := voteoption.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "VoteOption.count": %w`, err)}
		}
	}
	return nil
}

func (vouo *VoteOptionUpdateOne) sqlSave(ctx context.Context) (_node *VoteOption, err error) {
	if err := vouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(voteoption.Table, voteoption.Columns, sqlgraph.NewFieldSpec(voteoption.FieldID, field.TypeInt64))
	id, ok := vouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VoteOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voteoption.FieldID)
		for _, f := range fields {
			if !voteoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voteoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vouo.mutation.UpdatedAt(); ok {
		_spec.SetField(voteoption.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vouo.mutation.DeletedAt(); ok {
		_spec.SetField(voteoption.FieldDeletedAt, field.TypeTime, value)
	}
	if vouo.mutation.DeletedAtCleared() {
		_spec.ClearField(voteoption.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vouo.mutation.VoteID(); ok {
		_spec.SetField(voteoption.FieldVoteID, field.TypeInt64, value)
	}
	if value, ok := vouo.mutation.AddedVoteID(); ok {
		_spec.AddField(voteoption.FieldVoteID, field.TypeInt64, value)
	}
	if value, ok := vouo.mutation.Info(); ok {
		_spec.SetField(voteoption.FieldInfo, field.TypeString, value)
	}
	if value, ok := vouo.mutation.Count(); ok {
		_spec.SetField(voteoption.FieldCount, field.TypeInt64, value)
	}
	if value, ok := vouo.mutation.AddedCount(); ok {
		_spec.AddField(voteoption.FieldCount, field.TypeInt64, value)
	}
	_node = &VoteOption{config: vouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voteoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vouo.mutation.done = true
	return _node, nil
}
