// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/voteoption"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteOptionCreate is the builder for creating a VoteOption entity.
type VoteOptionCreate struct {
	config
	mutation *VoteOptionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (voc *VoteOptionCreate) SetCreatedAt(t time.Time) *VoteOptionCreate {
	voc.mutation.SetCreatedAt(t)
	return voc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (voc *VoteOptionCreate) SetNillableCreatedAt(t *time.Time) *VoteOptionCreate {
	if t != nil {
		voc.SetCreatedAt(*t)
	}
	return voc
}

// SetUpdatedAt sets the "updated_at" field.
func (voc *VoteOptionCreate) SetUpdatedAt(t time.Time) *VoteOptionCreate {
	voc.mutation.SetUpdatedAt(t)
	return voc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (voc *VoteOptionCreate) SetNillableUpdatedAt(t *time.Time) *VoteOptionCreate {
	if t != nil {
		voc.SetUpdatedAt(*t)
	}
	return voc
}

// SetDeletedAt sets the "deleted_at" field.
func (voc *VoteOptionCreate) SetDeletedAt(t time.Time) *VoteOptionCreate {
	voc.mutation.SetDeletedAt(t)
	return voc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (voc *VoteOptionCreate) SetNillableDeletedAt(t *time.Time) *VoteOptionCreate {
	if t != nil {
		voc.SetDeletedAt(*t)
	}
	return voc
}

// SetVoteID sets the "vote_id" field.
func (voc *VoteOptionCreate) SetVoteID(i int64) *VoteOptionCreate {
	voc.mutation.SetVoteID(i)
	return voc
}

// SetInfo sets the "info" field.
func (voc *VoteOptionCreate) SetInfo(s string) *VoteOptionCreate {
	voc.mutation.SetInfo(s)
	return voc
}

// SetCount sets the "count" field.
func (voc *VoteOptionCreate) SetCount(i int64) *VoteOptionCreate {
	voc.mutation.SetCount(i)
	return voc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (voc *VoteOptionCreate) SetNillableCount(i *int64) *VoteOptionCreate {
	if i != nil {
		voc.SetCount(*i)
	}
	return voc
}

// SetID sets the "id" field.
func (voc *VoteOptionCreate) SetID(i int64) *VoteOptionCreate {
	voc.mutation.SetID(i)
	return voc
}

// Mutation returns the VoteOptionMutation object of the builder.
func (voc *VoteOptionCreate) Mutation() *VoteOptionMutation {
	return voc.mutation
}

// Save creates the VoteOption in the database.
func (voc *VoteOptionCreate) Save(ctx context.Context) (*VoteOption, error) {
	voc.defaults()
	return withHooks(ctx, voc.sqlSave, voc.mutation, voc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (voc *VoteOptionCreate) SaveX(ctx context.Context) *VoteOption {
	v, err := voc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (voc *VoteOptionCreate) Exec(ctx context.Context) error {
	_, err := voc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (voc *VoteOptionCreate) ExecX(ctx context.Context) {
	if err := voc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (voc *VoteOptionCreate) defaults() {
	if _, ok := voc.mutation.CreatedAt(); !ok {
		v := voteoption.DefaultCreatedAt()
		voc.mutation.SetCreatedAt(v)
	}
	if _, ok := voc.mutation.UpdatedAt(); !ok {
		v := voteoption.DefaultUpdatedAt()
		voc.mutation.SetUpdatedAt(v)
	}
	if _, ok := voc.mutation.Count(); !ok {
		v := voteoption.DefaultCount
		voc.mutation.SetCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (voc *VoteOptionCreate) check() error {
	if _, ok := voc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VoteOption.created_at"`)}
	}
	if _, ok := voc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VoteOption.updated_at"`)}
	}
	if _, ok := voc.mutation.VoteID(); !ok {
		return &ValidationError{Name: "vote_id", err: errors.New(`ent: missing required field "VoteOption.vote_id"`)}
	}
	if v, ok := voc.mutation.VoteID(); ok {
		if err := voteoption.VoteIDValidator(v); err != nil {
			return &ValidationError{Name: "vote_id", err: fmt.Errorf(`ent: validator failed for field "VoteOption.vote_id": %w`, err)}
		}
	}
	if _, ok := voc.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "VoteOption.info"`)}
	}
	if v, ok := voc.mutation.Info(); ok {
		if err := voteoption.InfoValidator(v); err != nil {
			return &ValidationError{Name: "info", err: fmt.Errorf(`ent: validator failed for field "VoteOption.info": %w`, err)}
		}
	}
	if _, ok := voc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "VoteOption.count"`)}
	}
	if v, ok := voc.mutation.Count(); ok {
		if err := voteoption.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "VoteOption.count": %w`, err)}
		}
	}
	if v, ok := voc.mutation.ID(); ok {
		if err := voteoption.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "VoteOption.id": %w`, err)}
		}
	}
	return nil
}

func (voc *VoteOptionCreate) sqlSave(ctx context.Context) (*VoteOption, error) {
	if err := voc.check(); err != nil {
		return nil, err
	}
	_node, _spec := voc.createSpec()
	if err := sqlgraph.CreateNode(ctx, voc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	voc.mutation.id = &_node.ID
	voc.mutation.done = true
	return _node, nil
}

func (voc *VoteOptionCreate) createSpec() (*VoteOption, *sqlgraph.CreateSpec) {
	var (
		_node = &VoteOption{config: voc.config}
		_spec = sqlgraph.NewCreateSpec(voteoption.Table, sqlgraph.NewFieldSpec(voteoption.FieldID, field.TypeInt64))
	)
	if id, ok := voc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := voc.mutation.CreatedAt(); ok {
		_spec.SetField(voteoption.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := voc.mutation.UpdatedAt(); ok {
		_spec.SetField(voteoption.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := voc.mutation.DeletedAt(); ok {
		_spec.SetField(voteoption.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := voc.mutation.VoteID(); ok {
		_spec.SetField(voteoption.FieldVoteID, field.TypeInt64, value)
		_node.VoteID = value
	}
	if value, ok := voc.mutation.Info(); ok {
		_spec.SetField(voteoption.FieldInfo, field.TypeString, value)
		_node.Info = value
	}
	if value, ok := voc.mutation.Count(); ok {
		_spec.SetField(voteoption.FieldCount, field.TypeInt64, value)
		_node.Count = value
	}
	return _node, _spec
}

// VoteOptionCreateBulk is the builder for creating many VoteOption entities in bulk.
type VoteOptionCreateBulk struct {
	config
	err      error
	builders []*VoteOptionCreate
}

// Save creates the VoteOption entities in the database.
func (vocb *VoteOptionCreateBulk) Save(ctx context.Context) ([]*VoteOption, error) {
	if vocb.err != nil {
		return nil, vocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vocb.builders))
	nodes := make([]*VoteOption, len(vocb.builders))
	mutators := make([]Mutator, len(vocb.builders))
	for i := range vocb.builders {
		func(i int, root context.Context) {
			builder := vocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoteOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vocb *VoteOptionCreateBulk) SaveX(ctx context.Context) []*VoteOption {
	v, err := vocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vocb *VoteOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := vocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vocb *VoteOptionCreateBulk) ExecX(ctx context.Context) {
	if err := vocb.Exec(ctx); err != nil {
		panic(err)
	}
}
