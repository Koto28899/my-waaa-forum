// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/star"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StarCreate is the builder for creating a Star entity.
type StarCreate struct {
	config
	mutation *StarMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *StarCreate) SetCreatedAt(t time.Time) *StarCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StarCreate) SetNillableCreatedAt(t *time.Time) *StarCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StarCreate) SetUpdatedAt(t time.Time) *StarCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StarCreate) SetNillableUpdatedAt(t *time.Time) *StarCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StarCreate) SetDeletedAt(t time.Time) *StarCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StarCreate) SetNillableDeletedAt(t *time.Time) *StarCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetFromRoleID sets the "from_role_id" field.
func (sc *StarCreate) SetFromRoleID(i int64) *StarCreate {
	sc.mutation.SetFromRoleID(i)
	return sc
}

// SetSecneType sets the "secne_type" field.
func (sc *StarCreate) SetSecneType(st star.SecneType) *StarCreate {
	sc.mutation.SetSecneType(st)
	return sc
}

// SetSenceID sets the "sence_id" field.
func (sc *StarCreate) SetSenceID(i int64) *StarCreate {
	sc.mutation.SetSenceID(i)
	return sc
}

// SetID sets the "id" field.
func (sc *StarCreate) SetID(i int64) *StarCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the StarMutation object of the builder.
func (sc *StarCreate) Mutation() *StarMutation {
	return sc.mutation
}

// Save creates the Star in the database.
func (sc *StarCreate) Save(ctx context.Context) (*Star, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StarCreate) SaveX(ctx context.Context) *Star {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StarCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StarCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StarCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := star.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := star.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StarCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Star.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Star.updated_at"`)}
	}
	if _, ok := sc.mutation.FromRoleID(); !ok {
		return &ValidationError{Name: "from_role_id", err: errors.New(`ent: missing required field "Star.from_role_id"`)}
	}
	if v, ok := sc.mutation.FromRoleID(); ok {
		if err := star.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Star.from_role_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SecneType(); !ok {
		return &ValidationError{Name: "secne_type", err: errors.New(`ent: missing required field "Star.secne_type"`)}
	}
	if v, ok := sc.mutation.SecneType(); ok {
		if err := star.SecneTypeValidator(v); err != nil {
			return &ValidationError{Name: "secne_type", err: fmt.Errorf(`ent: validator failed for field "Star.secne_type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SenceID(); !ok {
		return &ValidationError{Name: "sence_id", err: errors.New(`ent: missing required field "Star.sence_id"`)}
	}
	if v, ok := sc.mutation.SenceID(); ok {
		if err := star.SenceIDValidator(v); err != nil {
			return &ValidationError{Name: "sence_id", err: fmt.Errorf(`ent: validator failed for field "Star.sence_id": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := star.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Star.id": %w`, err)}
		}
	}
	return nil
}

func (sc *StarCreate) sqlSave(ctx context.Context) (*Star, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StarCreate) createSpec() (*Star, *sqlgraph.CreateSpec) {
	var (
		_node = &Star{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(star.Table, sqlgraph.NewFieldSpec(star.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(star.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(star.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(star.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.FromRoleID(); ok {
		_spec.SetField(star.FieldFromRoleID, field.TypeInt64, value)
		_node.FromRoleID = value
	}
	if value, ok := sc.mutation.SecneType(); ok {
		_spec.SetField(star.FieldSecneType, field.TypeEnum, value)
		_node.SecneType = value
	}
	if value, ok := sc.mutation.SenceID(); ok {
		_spec.SetField(star.FieldSenceID, field.TypeInt64, value)
		_node.SenceID = value
	}
	return _node, _spec
}

// StarCreateBulk is the builder for creating many Star entities in bulk.
type StarCreateBulk struct {
	config
	err      error
	builders []*StarCreate
}

// Save creates the Star entities in the database.
func (scb *StarCreateBulk) Save(ctx context.Context) ([]*Star, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Star, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StarCreateBulk) SaveX(ctx context.Context) []*Star {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StarCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StarCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
