// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/vote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (vu *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VoteUpdate) SetUpdatedAt(t time.Time) *VoteUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VoteUpdate) SetDeletedAt(t time.Time) *VoteUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VoteUpdate) ClearDeletedAt() *VoteUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetFromPostID sets the "from_post_id" field.
func (vu *VoteUpdate) SetFromPostID(i int64) *VoteUpdate {
	vu.mutation.ResetFromPostID()
	vu.mutation.SetFromPostID(i)
	return vu
}

// SetNillableFromPostID sets the "from_post_id" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableFromPostID(i *int64) *VoteUpdate {
	if i != nil {
		vu.SetFromPostID(*i)
	}
	return vu
}

// AddFromPostID adds i to the "from_post_id" field.
func (vu *VoteUpdate) AddFromPostID(i int64) *VoteUpdate {
	vu.mutation.AddFromPostID(i)
	return vu
}

// SetRegister sets the "register" field.
func (vu *VoteUpdate) SetRegister(b bool) *VoteUpdate {
	vu.mutation.SetRegister(b)
	return vu
}

// SetNillableRegister sets the "register" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableRegister(b *bool) *VoteUpdate {
	if b != nil {
		vu.SetRegister(*b)
	}
	return vu
}

// Mutation returns the VoteMutation object of the builder.
func (vu *VoteUpdate) Mutation() *VoteMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoteUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoteUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoteUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VoteUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	if _, ok := vu.mutation.DeletedAt(); !ok && !vu.mutation.DeletedAtCleared() {
		v := vote.UpdateDefaultDeletedAt()
		vu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoteUpdate) check() error {
	if v, ok := vu.mutation.FromPostID(); ok {
		if err := vote.FromPostIDValidator(v); err != nil {
			return &ValidationError{Name: "from_post_id", err: fmt.Errorf(`ent: validator failed for field "Vote.from_post_id": %w`, err)}
		}
	}
	return nil
}

func (vu *VoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt64))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(vote.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(vote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.FromPostID(); ok {
		_spec.SetField(vote.FieldFromPostID, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedFromPostID(); ok {
		_spec.AddField(vote.FieldFromPostID, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.Register(); ok {
		_spec.SetField(vote.FieldRegister, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VoteUpdateOne) SetUpdatedAt(t time.Time) *VoteUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VoteUpdateOne) SetDeletedAt(t time.Time) *VoteUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VoteUpdateOne) ClearDeletedAt() *VoteUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetFromPostID sets the "from_post_id" field.
func (vuo *VoteUpdateOne) SetFromPostID(i int64) *VoteUpdateOne {
	vuo.mutation.ResetFromPostID()
	vuo.mutation.SetFromPostID(i)
	return vuo
}

// SetNillableFromPostID sets the "from_post_id" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableFromPostID(i *int64) *VoteUpdateOne {
	if i != nil {
		vuo.SetFromPostID(*i)
	}
	return vuo
}

// AddFromPostID adds i to the "from_post_id" field.
func (vuo *VoteUpdateOne) AddFromPostID(i int64) *VoteUpdateOne {
	vuo.mutation.AddFromPostID(i)
	return vuo
}

// SetRegister sets the "register" field.
func (vuo *VoteUpdateOne) SetRegister(b bool) *VoteUpdateOne {
	vuo.mutation.SetRegister(b)
	return vuo
}

// SetNillableRegister sets the "register" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableRegister(b *bool) *VoteUpdateOne {
	if b != nil {
		vuo.SetRegister(*b)
	}
	return vuo
}

// Mutation returns the VoteMutation object of the builder.
func (vuo *VoteUpdateOne) Mutation() *VoteMutation {
	return vuo.mutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (vuo *VoteUpdateOne) Where(ps ...predicate.Vote) *VoteUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vote entity.
func (vuo *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VoteUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := vuo.mutation.DeletedAt(); !ok && !vuo.mutation.DeletedAtCleared() {
		v := vote.UpdateDefaultDeletedAt()
		vuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoteUpdateOne) check() error {
	if v, ok := vuo.mutation.FromPostID(); ok {
		if err := vote.FromPostIDValidator(v); err != nil {
			return &ValidationError{Name: "from_post_id", err: fmt.Errorf(`ent: validator failed for field "Vote.from_post_id": %w`, err)}
		}
	}
	return nil
}

func (vuo *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt64))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(vote.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.FromPostID(); ok {
		_spec.SetField(vote.FieldFromPostID, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedFromPostID(); ok {
		_spec.AddField(vote.FieldFromPostID, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.Register(); ok {
		_spec.SetField(vote.FieldRegister, field.TypeBool, value)
	}
	_node = &Vote{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
