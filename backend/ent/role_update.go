// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/role"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoleUpdate) SetUpdatedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RoleUpdate) SetDeletedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RoleUpdate) ClearDeletedAt() *RoleUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetEmail sets the "email" field.
func (ru *RoleUpdate) SetEmail(s string) *RoleUpdate {
	ru.mutation.SetEmail(s)
	return ru
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableEmail(s *string) *RoleUpdate {
	if s != nil {
		ru.SetEmail(*s)
	}
	return ru
}

// SetHashedPwd sets the "hashed_pwd" field.
func (ru *RoleUpdate) SetHashedPwd(s string) *RoleUpdate {
	ru.mutation.SetHashedPwd(s)
	return ru
}

// SetNillableHashedPwd sets the "hashed_pwd" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableHashedPwd(s *string) *RoleUpdate {
	if s != nil {
		ru.SetHashedPwd(*s)
	}
	return ru
}

// SetPasswordChangedAt sets the "password_changed_at" field.
func (ru *RoleUpdate) SetPasswordChangedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetPasswordChangedAt(t)
	return ru
}

// SetNillablePasswordChangedAt sets the "password_changed_at" field if the given value is not nil.
func (ru *RoleUpdate) SetNillablePasswordChangedAt(t *time.Time) *RoleUpdate {
	if t != nil {
		ru.SetPasswordChangedAt(*t)
	}
	return ru
}

// SetRoleName sets the "role_name" field.
func (ru *RoleUpdate) SetRoleName(s string) *RoleUpdate {
	ru.mutation.SetRoleName(s)
	return ru
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableRoleName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetRoleName(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *RoleUpdate) SetType(r role.Type) *RoleUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableType(r *role.Type) *RoleUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// SetStatement sets the "statement" field.
func (ru *RoleUpdate) SetStatement(s string) *RoleUpdate {
	ru.mutation.SetStatement(s)
	return ru
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableStatement(s *string) *RoleUpdate {
	if s != nil {
		ru.SetStatement(*s)
	}
	return ru
}

// ClearStatement clears the value of the "statement" field.
func (ru *RoleUpdate) ClearStatement() *RoleUpdate {
	ru.mutation.ClearStatement()
	return ru
}

// SetPostsCount sets the "posts_count" field.
func (ru *RoleUpdate) SetPostsCount(i int64) *RoleUpdate {
	ru.mutation.ResetPostsCount()
	ru.mutation.SetPostsCount(i)
	return ru
}

// SetNillablePostsCount sets the "posts_count" field if the given value is not nil.
func (ru *RoleUpdate) SetNillablePostsCount(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetPostsCount(*i)
	}
	return ru
}

// AddPostsCount adds i to the "posts_count" field.
func (ru *RoleUpdate) AddPostsCount(i int64) *RoleUpdate {
	ru.mutation.AddPostsCount(i)
	return ru
}

// SetCommentsCount sets the "comments_count" field.
func (ru *RoleUpdate) SetCommentsCount(i int64) *RoleUpdate {
	ru.mutation.ResetCommentsCount()
	ru.mutation.SetCommentsCount(i)
	return ru
}

// SetNillableCommentsCount sets the "comments_count" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableCommentsCount(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetCommentsCount(*i)
	}
	return ru
}

// AddCommentsCount adds i to the "comments_count" field.
func (ru *RoleUpdate) AddCommentsCount(i int64) *RoleUpdate {
	ru.mutation.AddCommentsCount(i)
	return ru
}

// SetRepliesCount sets the "replies_count" field.
func (ru *RoleUpdate) SetRepliesCount(i int64) *RoleUpdate {
	ru.mutation.ResetRepliesCount()
	ru.mutation.SetRepliesCount(i)
	return ru
}

// SetNillableRepliesCount sets the "replies_count" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableRepliesCount(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetRepliesCount(*i)
	}
	return ru
}

// AddRepliesCount adds i to the "replies_count" field.
func (ru *RoleUpdate) AddRepliesCount(i int64) *RoleUpdate {
	ru.mutation.AddRepliesCount(i)
	return ru
}

// SetLikesCount sets the "likes_count" field.
func (ru *RoleUpdate) SetLikesCount(i int64) *RoleUpdate {
	ru.mutation.ResetLikesCount()
	ru.mutation.SetLikesCount(i)
	return ru
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableLikesCount(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetLikesCount(*i)
	}
	return ru
}

// AddLikesCount adds i to the "likes_count" field.
func (ru *RoleUpdate) AddLikesCount(i int64) *RoleUpdate {
	ru.mutation.AddLikesCount(i)
	return ru
}

// SetHelpsCount sets the "helps_count" field.
func (ru *RoleUpdate) SetHelpsCount(i int64) *RoleUpdate {
	ru.mutation.ResetHelpsCount()
	ru.mutation.SetHelpsCount(i)
	return ru
}

// SetNillableHelpsCount sets the "helps_count" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableHelpsCount(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetHelpsCount(*i)
	}
	return ru
}

// AddHelpsCount adds i to the "helps_count" field.
func (ru *RoleUpdate) AddHelpsCount(i int64) *RoleUpdate {
	ru.mutation.AddHelpsCount(i)
	return ru
}

// SetFansCount sets the "fans_count" field.
func (ru *RoleUpdate) SetFansCount(i int64) *RoleUpdate {
	ru.mutation.ResetFansCount()
	ru.mutation.SetFansCount(i)
	return ru
}

// SetNillableFansCount sets the "fans_count" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableFansCount(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetFansCount(*i)
	}
	return ru
}

// AddFansCount adds i to the "fans_count" field.
func (ru *RoleUpdate) AddFansCount(i int64) *RoleUpdate {
	ru.mutation.AddFansCount(i)
	return ru
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	if _, ok := ru.mutation.DeletedAt(); !ok && !ru.mutation.DeletedAtCleared() {
		v := role.UpdateDefaultDeletedAt()
		ru.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoleUpdate) check() error {
	if v, ok := ru.mutation.Email(); ok {
		if err := role.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Role.email": %w`, err)}
		}
	}
	if v, ok := ru.mutation.HashedPwd(); ok {
		if err := role.HashedPwdValidator(v); err != nil {
			return &ValidationError{Name: "hashed_pwd", err: fmt.Errorf(`ent: validator failed for field "Role.hashed_pwd": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RoleName(); ok {
		if err := role.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "Role.role_name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.GetType(); ok {
		if err := role.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Role.type": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Statement(); ok {
		if err := role.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "Role.statement": %w`, err)}
		}
	}
	if v, ok := ru.mutation.PostsCount(); ok {
		if err := role.PostsCountValidator(v); err != nil {
			return &ValidationError{Name: "posts_count", err: fmt.Errorf(`ent: validator failed for field "Role.posts_count": %w`, err)}
		}
	}
	if v, ok := ru.mutation.CommentsCount(); ok {
		if err := role.CommentsCountValidator(v); err != nil {
			return &ValidationError{Name: "comments_count", err: fmt.Errorf(`ent: validator failed for field "Role.comments_count": %w`, err)}
		}
	}
	if v, ok := ru.mutation.RepliesCount(); ok {
		if err := role.RepliesCountValidator(v); err != nil {
			return &ValidationError{Name: "replies_count", err: fmt.Errorf(`ent: validator failed for field "Role.replies_count": %w`, err)}
		}
	}
	if v, ok := ru.mutation.LikesCount(); ok {
		if err := role.LikesCountValidator(v); err != nil {
			return &ValidationError{Name: "likes_count", err: fmt.Errorf(`ent: validator failed for field "Role.likes_count": %w`, err)}
		}
	}
	if v, ok := ru.mutation.HelpsCount(); ok {
		if err := role.HelpsCountValidator(v); err != nil {
			return &ValidationError{Name: "helps_count", err: fmt.Errorf(`ent: validator failed for field "Role.helps_count": %w`, err)}
		}
	}
	if v, ok := ru.mutation.FansCount(); ok {
		if err := role.FansCountValidator(v); err != nil {
			return &ValidationError{Name: "fans_count", err: fmt.Errorf(`ent: validator failed for field "Role.fans_count": %w`, err)}
		}
	}
	return nil
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.Email(); ok {
		_spec.SetField(role.FieldEmail, field.TypeString, value)
	}
	if value, ok := ru.mutation.HashedPwd(); ok {
		_spec.SetField(role.FieldHashedPwd, field.TypeString, value)
	}
	if value, ok := ru.mutation.PasswordChangedAt(); ok {
		_spec.SetField(role.FieldPasswordChangedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.RoleName(); ok {
		_spec.SetField(role.FieldRoleName, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(role.FieldType, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.Statement(); ok {
		_spec.SetField(role.FieldStatement, field.TypeString, value)
	}
	if ru.mutation.StatementCleared() {
		_spec.ClearField(role.FieldStatement, field.TypeString)
	}
	if value, ok := ru.mutation.PostsCount(); ok {
		_spec.SetField(role.FieldPostsCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedPostsCount(); ok {
		_spec.AddField(role.FieldPostsCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.CommentsCount(); ok {
		_spec.SetField(role.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedCommentsCount(); ok {
		_spec.AddField(role.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.RepliesCount(); ok {
		_spec.SetField(role.FieldRepliesCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedRepliesCount(); ok {
		_spec.AddField(role.FieldRepliesCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.LikesCount(); ok {
		_spec.SetField(role.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedLikesCount(); ok {
		_spec.AddField(role.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.HelpsCount(); ok {
		_spec.SetField(role.FieldHelpsCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedHelpsCount(); ok {
		_spec.AddField(role.FieldHelpsCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.FansCount(); ok {
		_spec.SetField(role.FieldFansCount, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedFansCount(); ok {
		_spec.AddField(role.FieldFansCount, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoleUpdateOne) SetUpdatedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RoleUpdateOne) SetDeletedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RoleUpdateOne) ClearDeletedAt() *RoleUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetEmail sets the "email" field.
func (ruo *RoleUpdateOne) SetEmail(s string) *RoleUpdateOne {
	ruo.mutation.SetEmail(s)
	return ruo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableEmail(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetEmail(*s)
	}
	return ruo
}

// SetHashedPwd sets the "hashed_pwd" field.
func (ruo *RoleUpdateOne) SetHashedPwd(s string) *RoleUpdateOne {
	ruo.mutation.SetHashedPwd(s)
	return ruo
}

// SetNillableHashedPwd sets the "hashed_pwd" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableHashedPwd(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetHashedPwd(*s)
	}
	return ruo
}

// SetPasswordChangedAt sets the "password_changed_at" field.
func (ruo *RoleUpdateOne) SetPasswordChangedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetPasswordChangedAt(t)
	return ruo
}

// SetNillablePasswordChangedAt sets the "password_changed_at" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillablePasswordChangedAt(t *time.Time) *RoleUpdateOne {
	if t != nil {
		ruo.SetPasswordChangedAt(*t)
	}
	return ruo
}

// SetRoleName sets the "role_name" field.
func (ruo *RoleUpdateOne) SetRoleName(s string) *RoleUpdateOne {
	ruo.mutation.SetRoleName(s)
	return ruo
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableRoleName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetRoleName(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *RoleUpdateOne) SetType(r role.Type) *RoleUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableType(r *role.Type) *RoleUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// SetStatement sets the "statement" field.
func (ruo *RoleUpdateOne) SetStatement(s string) *RoleUpdateOne {
	ruo.mutation.SetStatement(s)
	return ruo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableStatement(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetStatement(*s)
	}
	return ruo
}

// ClearStatement clears the value of the "statement" field.
func (ruo *RoleUpdateOne) ClearStatement() *RoleUpdateOne {
	ruo.mutation.ClearStatement()
	return ruo
}

// SetPostsCount sets the "posts_count" field.
func (ruo *RoleUpdateOne) SetPostsCount(i int64) *RoleUpdateOne {
	ruo.mutation.ResetPostsCount()
	ruo.mutation.SetPostsCount(i)
	return ruo
}

// SetNillablePostsCount sets the "posts_count" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillablePostsCount(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetPostsCount(*i)
	}
	return ruo
}

// AddPostsCount adds i to the "posts_count" field.
func (ruo *RoleUpdateOne) AddPostsCount(i int64) *RoleUpdateOne {
	ruo.mutation.AddPostsCount(i)
	return ruo
}

// SetCommentsCount sets the "comments_count" field.
func (ruo *RoleUpdateOne) SetCommentsCount(i int64) *RoleUpdateOne {
	ruo.mutation.ResetCommentsCount()
	ruo.mutation.SetCommentsCount(i)
	return ruo
}

// SetNillableCommentsCount sets the "comments_count" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableCommentsCount(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetCommentsCount(*i)
	}
	return ruo
}

// AddCommentsCount adds i to the "comments_count" field.
func (ruo *RoleUpdateOne) AddCommentsCount(i int64) *RoleUpdateOne {
	ruo.mutation.AddCommentsCount(i)
	return ruo
}

// SetRepliesCount sets the "replies_count" field.
func (ruo *RoleUpdateOne) SetRepliesCount(i int64) *RoleUpdateOne {
	ruo.mutation.ResetRepliesCount()
	ruo.mutation.SetRepliesCount(i)
	return ruo
}

// SetNillableRepliesCount sets the "replies_count" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableRepliesCount(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetRepliesCount(*i)
	}
	return ruo
}

// AddRepliesCount adds i to the "replies_count" field.
func (ruo *RoleUpdateOne) AddRepliesCount(i int64) *RoleUpdateOne {
	ruo.mutation.AddRepliesCount(i)
	return ruo
}

// SetLikesCount sets the "likes_count" field.
func (ruo *RoleUpdateOne) SetLikesCount(i int64) *RoleUpdateOne {
	ruo.mutation.ResetLikesCount()
	ruo.mutation.SetLikesCount(i)
	return ruo
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableLikesCount(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetLikesCount(*i)
	}
	return ruo
}

// AddLikesCount adds i to the "likes_count" field.
func (ruo *RoleUpdateOne) AddLikesCount(i int64) *RoleUpdateOne {
	ruo.mutation.AddLikesCount(i)
	return ruo
}

// SetHelpsCount sets the "helps_count" field.
func (ruo *RoleUpdateOne) SetHelpsCount(i int64) *RoleUpdateOne {
	ruo.mutation.ResetHelpsCount()
	ruo.mutation.SetHelpsCount(i)
	return ruo
}

// SetNillableHelpsCount sets the "helps_count" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableHelpsCount(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetHelpsCount(*i)
	}
	return ruo
}

// AddHelpsCount adds i to the "helps_count" field.
func (ruo *RoleUpdateOne) AddHelpsCount(i int64) *RoleUpdateOne {
	ruo.mutation.AddHelpsCount(i)
	return ruo
}

// SetFansCount sets the "fans_count" field.
func (ruo *RoleUpdateOne) SetFansCount(i int64) *RoleUpdateOne {
	ruo.mutation.ResetFansCount()
	ruo.mutation.SetFansCount(i)
	return ruo
}

// SetNillableFansCount sets the "fans_count" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableFansCount(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetFansCount(*i)
	}
	return ruo
}

// AddFansCount adds i to the "fans_count" field.
func (ruo *RoleUpdateOne) AddFansCount(i int64) *RoleUpdateOne {
	ruo.mutation.AddFansCount(i)
	return ruo
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	if _, ok := ruo.mutation.DeletedAt(); !ok && !ruo.mutation.DeletedAtCleared() {
		v := role.UpdateDefaultDeletedAt()
		ruo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoleUpdateOne) check() error {
	if v, ok := ruo.mutation.Email(); ok {
		if err := role.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Role.email": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.HashedPwd(); ok {
		if err := role.HashedPwdValidator(v); err != nil {
			return &ValidationError{Name: "hashed_pwd", err: fmt.Errorf(`ent: validator failed for field "Role.hashed_pwd": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RoleName(); ok {
		if err := role.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "Role.role_name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.GetType(); ok {
		if err := role.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Role.type": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Statement(); ok {
		if err := role.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "Role.statement": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.PostsCount(); ok {
		if err := role.PostsCountValidator(v); err != nil {
			return &ValidationError{Name: "posts_count", err: fmt.Errorf(`ent: validator failed for field "Role.posts_count": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.CommentsCount(); ok {
		if err := role.CommentsCountValidator(v); err != nil {
			return &ValidationError{Name: "comments_count", err: fmt.Errorf(`ent: validator failed for field "Role.comments_count": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.RepliesCount(); ok {
		if err := role.RepliesCountValidator(v); err != nil {
			return &ValidationError{Name: "replies_count", err: fmt.Errorf(`ent: validator failed for field "Role.replies_count": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.LikesCount(); ok {
		if err := role.LikesCountValidator(v); err != nil {
			return &ValidationError{Name: "likes_count", err: fmt.Errorf(`ent: validator failed for field "Role.likes_count": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.HelpsCount(); ok {
		if err := role.HelpsCountValidator(v); err != nil {
			return &ValidationError{Name: "helps_count", err: fmt.Errorf(`ent: validator failed for field "Role.helps_count": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.FansCount(); ok {
		if err := role.FansCountValidator(v); err != nil {
			return &ValidationError{Name: "fans_count", err: fmt.Errorf(`ent: validator failed for field "Role.fans_count": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.Email(); ok {
		_spec.SetField(role.FieldEmail, field.TypeString, value)
	}
	if value, ok := ruo.mutation.HashedPwd(); ok {
		_spec.SetField(role.FieldHashedPwd, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PasswordChangedAt(); ok {
		_spec.SetField(role.FieldPasswordChangedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.RoleName(); ok {
		_spec.SetField(role.FieldRoleName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(role.FieldType, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.Statement(); ok {
		_spec.SetField(role.FieldStatement, field.TypeString, value)
	}
	if ruo.mutation.StatementCleared() {
		_spec.ClearField(role.FieldStatement, field.TypeString)
	}
	if value, ok := ruo.mutation.PostsCount(); ok {
		_spec.SetField(role.FieldPostsCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedPostsCount(); ok {
		_spec.AddField(role.FieldPostsCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.CommentsCount(); ok {
		_spec.SetField(role.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedCommentsCount(); ok {
		_spec.AddField(role.FieldCommentsCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.RepliesCount(); ok {
		_spec.SetField(role.FieldRepliesCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedRepliesCount(); ok {
		_spec.AddField(role.FieldRepliesCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.LikesCount(); ok {
		_spec.SetField(role.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedLikesCount(); ok {
		_spec.AddField(role.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.HelpsCount(); ok {
		_spec.SetField(role.FieldHelpsCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedHelpsCount(); ok {
		_spec.AddField(role.FieldHelpsCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.FansCount(); ok {
		_spec.SetField(role.FieldFansCount, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedFansCount(); ok {
		_spec.AddField(role.FieldFansCount, field.TypeInt64, value)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
