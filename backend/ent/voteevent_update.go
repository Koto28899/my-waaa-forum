// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/voteevent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteEventUpdate is the builder for updating VoteEvent entities.
type VoteEventUpdate struct {
	config
	hooks    []Hook
	mutation *VoteEventMutation
}

// Where appends a list predicates to the VoteEventUpdate builder.
func (veu *VoteEventUpdate) Where(ps ...predicate.VoteEvent) *VoteEventUpdate {
	veu.mutation.Where(ps...)
	return veu
}

// SetUpdatedAt sets the "updated_at" field.
func (veu *VoteEventUpdate) SetUpdatedAt(t time.Time) *VoteEventUpdate {
	veu.mutation.SetUpdatedAt(t)
	return veu
}

// SetDeletedAt sets the "deleted_at" field.
func (veu *VoteEventUpdate) SetDeletedAt(t time.Time) *VoteEventUpdate {
	veu.mutation.SetDeletedAt(t)
	return veu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (veu *VoteEventUpdate) ClearDeletedAt() *VoteEventUpdate {
	veu.mutation.ClearDeletedAt()
	return veu
}

// SetFromRoleID sets the "from_role_id" field.
func (veu *VoteEventUpdate) SetFromRoleID(i int64) *VoteEventUpdate {
	veu.mutation.ResetFromRoleID()
	veu.mutation.SetFromRoleID(i)
	return veu
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (veu *VoteEventUpdate) SetNillableFromRoleID(i *int64) *VoteEventUpdate {
	if i != nil {
		veu.SetFromRoleID(*i)
	}
	return veu
}

// AddFromRoleID adds i to the "from_role_id" field.
func (veu *VoteEventUpdate) AddFromRoleID(i int64) *VoteEventUpdate {
	veu.mutation.AddFromRoleID(i)
	return veu
}

// SetToVoteID sets the "to_vote_id" field.
func (veu *VoteEventUpdate) SetToVoteID(i int64) *VoteEventUpdate {
	veu.mutation.ResetToVoteID()
	veu.mutation.SetToVoteID(i)
	return veu
}

// SetNillableToVoteID sets the "to_vote_id" field if the given value is not nil.
func (veu *VoteEventUpdate) SetNillableToVoteID(i *int64) *VoteEventUpdate {
	if i != nil {
		veu.SetToVoteID(*i)
	}
	return veu
}

// AddToVoteID adds i to the "to_vote_id" field.
func (veu *VoteEventUpdate) AddToVoteID(i int64) *VoteEventUpdate {
	veu.mutation.AddToVoteID(i)
	return veu
}

// SetToVoteOption sets the "to_vote_option" field.
func (veu *VoteEventUpdate) SetToVoteOption(i int64) *VoteEventUpdate {
	veu.mutation.ResetToVoteOption()
	veu.mutation.SetToVoteOption(i)
	return veu
}

// SetNillableToVoteOption sets the "to_vote_option" field if the given value is not nil.
func (veu *VoteEventUpdate) SetNillableToVoteOption(i *int64) *VoteEventUpdate {
	if i != nil {
		veu.SetToVoteOption(*i)
	}
	return veu
}

// AddToVoteOption adds i to the "to_vote_option" field.
func (veu *VoteEventUpdate) AddToVoteOption(i int64) *VoteEventUpdate {
	veu.mutation.AddToVoteOption(i)
	return veu
}

// Mutation returns the VoteEventMutation object of the builder.
func (veu *VoteEventUpdate) Mutation() *VoteEventMutation {
	return veu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (veu *VoteEventUpdate) Save(ctx context.Context) (int, error) {
	veu.defaults()
	return withHooks(ctx, veu.sqlSave, veu.mutation, veu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (veu *VoteEventUpdate) SaveX(ctx context.Context) int {
	affected, err := veu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (veu *VoteEventUpdate) Exec(ctx context.Context) error {
	_, err := veu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veu *VoteEventUpdate) ExecX(ctx context.Context) {
	if err := veu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (veu *VoteEventUpdate) defaults() {
	if _, ok := veu.mutation.UpdatedAt(); !ok {
		v := voteevent.UpdateDefaultUpdatedAt()
		veu.mutation.SetUpdatedAt(v)
	}
	if _, ok := veu.mutation.DeletedAt(); !ok && !veu.mutation.DeletedAtCleared() {
		v := voteevent.UpdateDefaultDeletedAt()
		veu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (veu *VoteEventUpdate) check() error {
	if v, ok := veu.mutation.FromRoleID(); ok {
		if err := voteevent.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.from_role_id": %w`, err)}
		}
	}
	if v, ok := veu.mutation.ToVoteID(); ok {
		if err := voteevent.ToVoteIDValidator(v); err != nil {
			return &ValidationError{Name: "to_vote_id", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.to_vote_id": %w`, err)}
		}
	}
	if v, ok := veu.mutation.ToVoteOption(); ok {
		if err := voteevent.ToVoteOptionValidator(v); err != nil {
			return &ValidationError{Name: "to_vote_option", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.to_vote_option": %w`, err)}
		}
	}
	return nil
}

func (veu *VoteEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := veu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(voteevent.Table, voteevent.Columns, sqlgraph.NewFieldSpec(voteevent.FieldID, field.TypeInt64))
	if ps := veu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := veu.mutation.UpdatedAt(); ok {
		_spec.SetField(voteevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := veu.mutation.DeletedAt(); ok {
		_spec.SetField(voteevent.FieldDeletedAt, field.TypeTime, value)
	}
	if veu.mutation.DeletedAtCleared() {
		_spec.ClearField(voteevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := veu.mutation.FromRoleID(); ok {
		_spec.SetField(voteevent.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.AddedFromRoleID(); ok {
		_spec.AddField(voteevent.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.ToVoteID(); ok {
		_spec.SetField(voteevent.FieldToVoteID, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.AddedToVoteID(); ok {
		_spec.AddField(voteevent.FieldToVoteID, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.ToVoteOption(); ok {
		_spec.SetField(voteevent.FieldToVoteOption, field.TypeInt64, value)
	}
	if value, ok := veu.mutation.AddedToVoteOption(); ok {
		_spec.AddField(voteevent.FieldToVoteOption, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, veu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voteevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	veu.mutation.done = true
	return n, nil
}

// VoteEventUpdateOne is the builder for updating a single VoteEvent entity.
type VoteEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteEventMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (veuo *VoteEventUpdateOne) SetUpdatedAt(t time.Time) *VoteEventUpdateOne {
	veuo.mutation.SetUpdatedAt(t)
	return veuo
}

// SetDeletedAt sets the "deleted_at" field.
func (veuo *VoteEventUpdateOne) SetDeletedAt(t time.Time) *VoteEventUpdateOne {
	veuo.mutation.SetDeletedAt(t)
	return veuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (veuo *VoteEventUpdateOne) ClearDeletedAt() *VoteEventUpdateOne {
	veuo.mutation.ClearDeletedAt()
	return veuo
}

// SetFromRoleID sets the "from_role_id" field.
func (veuo *VoteEventUpdateOne) SetFromRoleID(i int64) *VoteEventUpdateOne {
	veuo.mutation.ResetFromRoleID()
	veuo.mutation.SetFromRoleID(i)
	return veuo
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (veuo *VoteEventUpdateOne) SetNillableFromRoleID(i *int64) *VoteEventUpdateOne {
	if i != nil {
		veuo.SetFromRoleID(*i)
	}
	return veuo
}

// AddFromRoleID adds i to the "from_role_id" field.
func (veuo *VoteEventUpdateOne) AddFromRoleID(i int64) *VoteEventUpdateOne {
	veuo.mutation.AddFromRoleID(i)
	return veuo
}

// SetToVoteID sets the "to_vote_id" field.
func (veuo *VoteEventUpdateOne) SetToVoteID(i int64) *VoteEventUpdateOne {
	veuo.mutation.ResetToVoteID()
	veuo.mutation.SetToVoteID(i)
	return veuo
}

// SetNillableToVoteID sets the "to_vote_id" field if the given value is not nil.
func (veuo *VoteEventUpdateOne) SetNillableToVoteID(i *int64) *VoteEventUpdateOne {
	if i != nil {
		veuo.SetToVoteID(*i)
	}
	return veuo
}

// AddToVoteID adds i to the "to_vote_id" field.
func (veuo *VoteEventUpdateOne) AddToVoteID(i int64) *VoteEventUpdateOne {
	veuo.mutation.AddToVoteID(i)
	return veuo
}

// SetToVoteOption sets the "to_vote_option" field.
func (veuo *VoteEventUpdateOne) SetToVoteOption(i int64) *VoteEventUpdateOne {
	veuo.mutation.ResetToVoteOption()
	veuo.mutation.SetToVoteOption(i)
	return veuo
}

// SetNillableToVoteOption sets the "to_vote_option" field if the given value is not nil.
func (veuo *VoteEventUpdateOne) SetNillableToVoteOption(i *int64) *VoteEventUpdateOne {
	if i != nil {
		veuo.SetToVoteOption(*i)
	}
	return veuo
}

// AddToVoteOption adds i to the "to_vote_option" field.
func (veuo *VoteEventUpdateOne) AddToVoteOption(i int64) *VoteEventUpdateOne {
	veuo.mutation.AddToVoteOption(i)
	return veuo
}

// Mutation returns the VoteEventMutation object of the builder.
func (veuo *VoteEventUpdateOne) Mutation() *VoteEventMutation {
	return veuo.mutation
}

// Where appends a list predicates to the VoteEventUpdate builder.
func (veuo *VoteEventUpdateOne) Where(ps ...predicate.VoteEvent) *VoteEventUpdateOne {
	veuo.mutation.Where(ps...)
	return veuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (veuo *VoteEventUpdateOne) Select(field string, fields ...string) *VoteEventUpdateOne {
	veuo.fields = append([]string{field}, fields...)
	return veuo
}

// Save executes the query and returns the updated VoteEvent entity.
func (veuo *VoteEventUpdateOne) Save(ctx context.Context) (*VoteEvent, error) {
	veuo.defaults()
	return withHooks(ctx, veuo.sqlSave, veuo.mutation, veuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (veuo *VoteEventUpdateOne) SaveX(ctx context.Context) *VoteEvent {
	node, err := veuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (veuo *VoteEventUpdateOne) Exec(ctx context.Context) error {
	_, err := veuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (veuo *VoteEventUpdateOne) ExecX(ctx context.Context) {
	if err := veuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (veuo *VoteEventUpdateOne) defaults() {
	if _, ok := veuo.mutation.UpdatedAt(); !ok {
		v := voteevent.UpdateDefaultUpdatedAt()
		veuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := veuo.mutation.DeletedAt(); !ok && !veuo.mutation.DeletedAtCleared() {
		v := voteevent.UpdateDefaultDeletedAt()
		veuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (veuo *VoteEventUpdateOne) check() error {
	if v, ok := veuo.mutation.FromRoleID(); ok {
		if err := voteevent.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.from_role_id": %w`, err)}
		}
	}
	if v, ok := veuo.mutation.ToVoteID(); ok {
		if err := voteevent.ToVoteIDValidator(v); err != nil {
			return &ValidationError{Name: "to_vote_id", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.to_vote_id": %w`, err)}
		}
	}
	if v, ok := veuo.mutation.ToVoteOption(); ok {
		if err := voteevent.ToVoteOptionValidator(v); err != nil {
			return &ValidationError{Name: "to_vote_option", err: fmt.Errorf(`ent: validator failed for field "VoteEvent.to_vote_option": %w`, err)}
		}
	}
	return nil
}

func (veuo *VoteEventUpdateOne) sqlSave(ctx context.Context) (_node *VoteEvent, err error) {
	if err := veuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(voteevent.Table, voteevent.Columns, sqlgraph.NewFieldSpec(voteevent.FieldID, field.TypeInt64))
	id, ok := veuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VoteEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := veuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voteevent.FieldID)
		for _, f := range fields {
			if !voteevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voteevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := veuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := veuo.mutation.UpdatedAt(); ok {
		_spec.SetField(voteevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := veuo.mutation.DeletedAt(); ok {
		_spec.SetField(voteevent.FieldDeletedAt, field.TypeTime, value)
	}
	if veuo.mutation.DeletedAtCleared() {
		_spec.ClearField(voteevent.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := veuo.mutation.FromRoleID(); ok {
		_spec.SetField(voteevent.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.AddedFromRoleID(); ok {
		_spec.AddField(voteevent.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.ToVoteID(); ok {
		_spec.SetField(voteevent.FieldToVoteID, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.AddedToVoteID(); ok {
		_spec.AddField(voteevent.FieldToVoteID, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.ToVoteOption(); ok {
		_spec.SetField(voteevent.FieldToVoteOption, field.TypeInt64, value)
	}
	if value, ok := veuo.mutation.AddedToVoteOption(); ok {
		_spec.AddField(voteevent.FieldToVoteOption, field.TypeInt64, value)
	}
	_node = &VoteEvent{config: veuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, veuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voteevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	veuo.mutation.done = true
	return _node, nil
}
