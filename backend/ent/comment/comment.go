// Code generated by ent, DO NOT EDIT.

package comment

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldFromRoleID holds the string denoting the from_role_id field in the database.
	FieldFromRoleID = "from_role_id"
	// FieldToPostID holds the string denoting the to_post_id field in the database.
	FieldToPostID = "to_post_id"
	// FieldLikesCount holds the string denoting the likes_count field in the database.
	FieldLikesCount = "likes_count"
	// FieldIsTop holds the string denoting the is_top field in the database.
	FieldIsTop = "is_top"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// Table holds the table name of the comment in the database.
	Table = "comments"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldFromRoleID,
	FieldToPostID,
	FieldLikesCount,
	FieldIsTop,
	FieldBody,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdateDefaultDeletedAt holds the default value on update for the "deleted_at" field.
	UpdateDefaultDeletedAt func() time.Time
	// FromRoleIDValidator is a validator for the "from_role_id" field. It is called by the builders before save.
	FromRoleIDValidator func(int64) error
	// ToPostIDValidator is a validator for the "to_post_id" field. It is called by the builders before save.
	ToPostIDValidator func(int64) error
	// DefaultLikesCount holds the default value on creation for the "likes_count" field.
	DefaultLikesCount int64
	// LikesCountValidator is a validator for the "likes_count" field. It is called by the builders before save.
	LikesCountValidator func(int64) error
	// DefaultIsTop holds the default value on creation for the "is_top" field.
	DefaultIsTop bool
	// BodyValidator is a validator for the "body" field. It is called by the builders before save.
	BodyValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the Comment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByFromRoleID orders the results by the from_role_id field.
func ByFromRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromRoleID, opts...).ToFunc()
}

// ByToPostID orders the results by the to_post_id field.
func ByToPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToPostID, opts...).ToFunc()
}

// ByLikesCount orders the results by the likes_count field.
func ByLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikesCount, opts...).ToFunc()
}

// ByIsTop orders the results by the is_top field.
func ByIsTop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTop, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}
