// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/voteevent"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteEventDelete is the builder for deleting a VoteEvent entity.
type VoteEventDelete struct {
	config
	hooks    []Hook
	mutation *VoteEventMutation
}

// Where appends a list predicates to the VoteEventDelete builder.
func (ved *VoteEventDelete) Where(ps ...predicate.VoteEvent) *VoteEventDelete {
	ved.mutation.Where(ps...)
	return ved
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ved *VoteEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ved.sqlExec, ved.mutation, ved.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ved *VoteEventDelete) ExecX(ctx context.Context) int {
	n, err := ved.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ved *VoteEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(voteevent.Table, sqlgraph.NewFieldSpec(voteevent.FieldID, field.TypeInt64))
	if ps := ved.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ved.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ved.mutation.done = true
	return affected, err
}

// VoteEventDeleteOne is the builder for deleting a single VoteEvent entity.
type VoteEventDeleteOne struct {
	ved *VoteEventDelete
}

// Where appends a list predicates to the VoteEventDelete builder.
func (vedo *VoteEventDeleteOne) Where(ps ...predicate.VoteEvent) *VoteEventDeleteOne {
	vedo.ved.mutation.Where(ps...)
	return vedo
}

// Exec executes the deletion query.
func (vedo *VoteEventDeleteOne) Exec(ctx context.Context) error {
	n, err := vedo.ved.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{voteevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vedo *VoteEventDeleteOne) ExecX(ctx context.Context) {
	if err := vedo.Exec(ctx); err != nil {
		panic(err)
	}
}
