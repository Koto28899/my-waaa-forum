// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/reply"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReplyCreate is the builder for creating a Reply entity.
type ReplyCreate struct {
	config
	mutation *ReplyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReplyCreate) SetCreatedAt(t time.Time) *ReplyCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableCreatedAt(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReplyCreate) SetUpdatedAt(t time.Time) *ReplyCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableUpdatedAt(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *ReplyCreate) SetDeletedAt(t time.Time) *ReplyCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableDeletedAt(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetFromRoleID sets the "from_role_id" field.
func (rc *ReplyCreate) SetFromRoleID(i int64) *ReplyCreate {
	rc.mutation.SetFromRoleID(i)
	return rc
}

// SetToPostID sets the "to_post_id" field.
func (rc *ReplyCreate) SetToPostID(i int64) *ReplyCreate {
	rc.mutation.SetToPostID(i)
	return rc
}

// SetLikesCount sets the "likes_count" field.
func (rc *ReplyCreate) SetLikesCount(i int64) *ReplyCreate {
	rc.mutation.SetLikesCount(i)
	return rc
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableLikesCount(i *int64) *ReplyCreate {
	if i != nil {
		rc.SetLikesCount(*i)
	}
	return rc
}

// SetIsTop sets the "is_top" field.
func (rc *ReplyCreate) SetIsTop(b bool) *ReplyCreate {
	rc.mutation.SetIsTop(b)
	return rc
}

// SetNillableIsTop sets the "is_top" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableIsTop(b *bool) *ReplyCreate {
	if b != nil {
		rc.SetIsTop(*b)
	}
	return rc
}

// SetBody sets the "body" field.
func (rc *ReplyCreate) SetBody(s string) *ReplyCreate {
	rc.mutation.SetBody(s)
	return rc
}

// SetID sets the "id" field.
func (rc *ReplyCreate) SetID(i int64) *ReplyCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the ReplyMutation object of the builder.
func (rc *ReplyCreate) Mutation() *ReplyMutation {
	return rc.mutation
}

// Save creates the Reply in the database.
func (rc *ReplyCreate) Save(ctx context.Context) (*Reply, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReplyCreate) SaveX(ctx context.Context) *Reply {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReplyCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReplyCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReplyCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reply.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := reply.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.LikesCount(); !ok {
		v := reply.DefaultLikesCount
		rc.mutation.SetLikesCount(v)
	}
	if _, ok := rc.mutation.IsTop(); !ok {
		v := reply.DefaultIsTop
		rc.mutation.SetIsTop(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReplyCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reply.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reply.updated_at"`)}
	}
	if _, ok := rc.mutation.FromRoleID(); !ok {
		return &ValidationError{Name: "from_role_id", err: errors.New(`ent: missing required field "Reply.from_role_id"`)}
	}
	if v, ok := rc.mutation.FromRoleID(); ok {
		if err := reply.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Reply.from_role_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ToPostID(); !ok {
		return &ValidationError{Name: "to_post_id", err: errors.New(`ent: missing required field "Reply.to_post_id"`)}
	}
	if v, ok := rc.mutation.ToPostID(); ok {
		if err := reply.ToPostIDValidator(v); err != nil {
			return &ValidationError{Name: "to_post_id", err: fmt.Errorf(`ent: validator failed for field "Reply.to_post_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.LikesCount(); !ok {
		return &ValidationError{Name: "likes_count", err: errors.New(`ent: missing required field "Reply.likes_count"`)}
	}
	if v, ok := rc.mutation.LikesCount(); ok {
		if err := reply.LikesCountValidator(v); err != nil {
			return &ValidationError{Name: "likes_count", err: fmt.Errorf(`ent: validator failed for field "Reply.likes_count": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsTop(); !ok {
		return &ValidationError{Name: "is_top", err: errors.New(`ent: missing required field "Reply.is_top"`)}
	}
	if _, ok := rc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Reply.body"`)}
	}
	if v, ok := rc.mutation.Body(); ok {
		if err := reply.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "Reply.body": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := reply.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Reply.id": %w`, err)}
		}
	}
	return nil
}

func (rc *ReplyCreate) sqlSave(ctx context.Context) (*Reply, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReplyCreate) createSpec() (*Reply, *sqlgraph.CreateSpec) {
	var (
		_node = &Reply{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reply.Table, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reply.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reply.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(reply.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.FromRoleID(); ok {
		_spec.SetField(reply.FieldFromRoleID, field.TypeInt64, value)
		_node.FromRoleID = value
	}
	if value, ok := rc.mutation.ToPostID(); ok {
		_spec.SetField(reply.FieldToPostID, field.TypeInt64, value)
		_node.ToPostID = value
	}
	if value, ok := rc.mutation.LikesCount(); ok {
		_spec.SetField(reply.FieldLikesCount, field.TypeInt64, value)
		_node.LikesCount = value
	}
	if value, ok := rc.mutation.IsTop(); ok {
		_spec.SetField(reply.FieldIsTop, field.TypeBool, value)
		_node.IsTop = value
	}
	if value, ok := rc.mutation.Body(); ok {
		_spec.SetField(reply.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	return _node, _spec
}

// ReplyCreateBulk is the builder for creating many Reply entities in bulk.
type ReplyCreateBulk struct {
	config
	err      error
	builders []*ReplyCreate
}

// Save creates the Reply entities in the database.
func (rcb *ReplyCreateBulk) Save(ctx context.Context) ([]*Reply, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reply, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReplyCreateBulk) SaveX(ctx context.Context) []*Reply {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReplyCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReplyCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
