// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/follow"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FollowUpdate is the builder for updating Follow entities.
type FollowUpdate struct {
	config
	hooks    []Hook
	mutation *FollowMutation
}

// Where appends a list predicates to the FollowUpdate builder.
func (fu *FollowUpdate) Where(ps ...predicate.Follow) *FollowUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FollowUpdate) SetUpdatedAt(t time.Time) *FollowUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FollowUpdate) SetDeletedAt(t time.Time) *FollowUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fu *FollowUpdate) ClearDeletedAt() *FollowUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetFromRoleID sets the "from_role_id" field.
func (fu *FollowUpdate) SetFromRoleID(i int64) *FollowUpdate {
	fu.mutation.ResetFromRoleID()
	fu.mutation.SetFromRoleID(i)
	return fu
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (fu *FollowUpdate) SetNillableFromRoleID(i *int64) *FollowUpdate {
	if i != nil {
		fu.SetFromRoleID(*i)
	}
	return fu
}

// AddFromRoleID adds i to the "from_role_id" field.
func (fu *FollowUpdate) AddFromRoleID(i int64) *FollowUpdate {
	fu.mutation.AddFromRoleID(i)
	return fu
}

// SetToRoleID sets the "to_role_id" field.
func (fu *FollowUpdate) SetToRoleID(i int64) *FollowUpdate {
	fu.mutation.ResetToRoleID()
	fu.mutation.SetToRoleID(i)
	return fu
}

// SetNillableToRoleID sets the "to_role_id" field if the given value is not nil.
func (fu *FollowUpdate) SetNillableToRoleID(i *int64) *FollowUpdate {
	if i != nil {
		fu.SetToRoleID(*i)
	}
	return fu
}

// AddToRoleID adds i to the "to_role_id" field.
func (fu *FollowUpdate) AddToRoleID(i int64) *FollowUpdate {
	fu.mutation.AddToRoleID(i)
	return fu
}

// Mutation returns the FollowMutation object of the builder.
func (fu *FollowUpdate) Mutation() *FollowMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FollowUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FollowUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FollowUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FollowUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FollowUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := follow.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	if _, ok := fu.mutation.DeletedAt(); !ok && !fu.mutation.DeletedAtCleared() {
		v := follow.UpdateDefaultDeletedAt()
		fu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FollowUpdate) check() error {
	if v, ok := fu.mutation.FromRoleID(); ok {
		if err := follow.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Follow.from_role_id": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ToRoleID(); ok {
		if err := follow.ToRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "to_role_id", err: fmt.Errorf(`ent: validator failed for field "Follow.to_role_id": %w`, err)}
		}
	}
	return nil
}

func (fu *FollowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(follow.Table, follow.Columns, sqlgraph.NewFieldSpec(follow.FieldID, field.TypeInt64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(follow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(follow.FieldDeletedAt, field.TypeTime, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(follow.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.FromRoleID(); ok {
		_spec.SetField(follow.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedFromRoleID(); ok {
		_spec.AddField(follow.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.ToRoleID(); ok {
		_spec.SetField(follow.FieldToRoleID, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedToRoleID(); ok {
		_spec.AddField(follow.FieldToRoleID, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{follow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FollowUpdateOne is the builder for updating a single Follow entity.
type FollowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FollowMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FollowUpdateOne) SetUpdatedAt(t time.Time) *FollowUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FollowUpdateOne) SetDeletedAt(t time.Time) *FollowUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuo *FollowUpdateOne) ClearDeletedAt() *FollowUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetFromRoleID sets the "from_role_id" field.
func (fuo *FollowUpdateOne) SetFromRoleID(i int64) *FollowUpdateOne {
	fuo.mutation.ResetFromRoleID()
	fuo.mutation.SetFromRoleID(i)
	return fuo
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (fuo *FollowUpdateOne) SetNillableFromRoleID(i *int64) *FollowUpdateOne {
	if i != nil {
		fuo.SetFromRoleID(*i)
	}
	return fuo
}

// AddFromRoleID adds i to the "from_role_id" field.
func (fuo *FollowUpdateOne) AddFromRoleID(i int64) *FollowUpdateOne {
	fuo.mutation.AddFromRoleID(i)
	return fuo
}

// SetToRoleID sets the "to_role_id" field.
func (fuo *FollowUpdateOne) SetToRoleID(i int64) *FollowUpdateOne {
	fuo.mutation.ResetToRoleID()
	fuo.mutation.SetToRoleID(i)
	return fuo
}

// SetNillableToRoleID sets the "to_role_id" field if the given value is not nil.
func (fuo *FollowUpdateOne) SetNillableToRoleID(i *int64) *FollowUpdateOne {
	if i != nil {
		fuo.SetToRoleID(*i)
	}
	return fuo
}

// AddToRoleID adds i to the "to_role_id" field.
func (fuo *FollowUpdateOne) AddToRoleID(i int64) *FollowUpdateOne {
	fuo.mutation.AddToRoleID(i)
	return fuo
}

// Mutation returns the FollowMutation object of the builder.
func (fuo *FollowUpdateOne) Mutation() *FollowMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FollowUpdate builder.
func (fuo *FollowUpdateOne) Where(ps ...predicate.Follow) *FollowUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FollowUpdateOne) Select(field string, fields ...string) *FollowUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Follow entity.
func (fuo *FollowUpdateOne) Save(ctx context.Context) (*Follow, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FollowUpdateOne) SaveX(ctx context.Context) *Follow {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FollowUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FollowUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FollowUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := follow.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := fuo.mutation.DeletedAt(); !ok && !fuo.mutation.DeletedAtCleared() {
		v := follow.UpdateDefaultDeletedAt()
		fuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FollowUpdateOne) check() error {
	if v, ok := fuo.mutation.FromRoleID(); ok {
		if err := follow.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Follow.from_role_id": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ToRoleID(); ok {
		if err := follow.ToRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "to_role_id", err: fmt.Errorf(`ent: validator failed for field "Follow.to_role_id": %w`, err)}
		}
	}
	return nil
}

func (fuo *FollowUpdateOne) sqlSave(ctx context.Context) (_node *Follow, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(follow.Table, follow.Columns, sqlgraph.NewFieldSpec(follow.FieldID, field.TypeInt64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Follow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, follow.FieldID)
		for _, f := range fields {
			if !follow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != follow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(follow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(follow.FieldDeletedAt, field.TypeTime, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(follow.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.FromRoleID(); ok {
		_spec.SetField(follow.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedFromRoleID(); ok {
		_spec.AddField(follow.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.ToRoleID(); ok {
		_spec.SetField(follow.FieldToRoleID, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedToRoleID(); ok {
		_spec.AddField(follow.FieldToRoleID, field.TypeInt64, value)
	}
	_node = &Follow{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{follow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
