// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/voteoption"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteOptionDelete is the builder for deleting a VoteOption entity.
type VoteOptionDelete struct {
	config
	hooks    []Hook
	mutation *VoteOptionMutation
}

// Where appends a list predicates to the VoteOptionDelete builder.
func (vod *VoteOptionDelete) Where(ps ...predicate.VoteOption) *VoteOptionDelete {
	vod.mutation.Where(ps...)
	return vod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vod *VoteOptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vod.sqlExec, vod.mutation, vod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vod *VoteOptionDelete) ExecX(ctx context.Context) int {
	n, err := vod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vod *VoteOptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(voteoption.Table, sqlgraph.NewFieldSpec(voteoption.FieldID, field.TypeInt64))
	if ps := vod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vod.mutation.done = true
	return affected, err
}

// VoteOptionDeleteOne is the builder for deleting a single VoteOption entity.
type VoteOptionDeleteOne struct {
	vod *VoteOptionDelete
}

// Where appends a list predicates to the VoteOptionDelete builder.
func (vodo *VoteOptionDeleteOne) Where(ps ...predicate.VoteOption) *VoteOptionDeleteOne {
	vodo.vod.mutation.Where(ps...)
	return vodo
}

// Exec executes the deletion query.
func (vodo *VoteOptionDeleteOne) Exec(ctx context.Context) error {
	n, err := vodo.vod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{voteoption.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vodo *VoteOptionDeleteOne) ExecX(ctx context.Context) {
	if err := vodo.Exec(ctx); err != nil {
		panic(err)
	}
}
