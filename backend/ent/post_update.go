// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/post"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PostUpdate) SetDeletedAt(t time.Time) *PostUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PostUpdate) ClearDeletedAt() *PostUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetFromRoleID sets the "from_role_id" field.
func (pu *PostUpdate) SetFromRoleID(i int64) *PostUpdate {
	pu.mutation.ResetFromRoleID()
	pu.mutation.SetFromRoleID(i)
	return pu
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableFromRoleID(i *int64) *PostUpdate {
	if i != nil {
		pu.SetFromRoleID(*i)
	}
	return pu
}

// AddFromRoleID adds i to the "from_role_id" field.
func (pu *PostUpdate) AddFromRoleID(i int64) *PostUpdate {
	pu.mutation.AddFromRoleID(i)
	return pu
}

// SetToSectionID sets the "to_section_id" field.
func (pu *PostUpdate) SetToSectionID(i int64) *PostUpdate {
	pu.mutation.ResetToSectionID()
	pu.mutation.SetToSectionID(i)
	return pu
}

// SetNillableToSectionID sets the "to_section_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableToSectionID(i *int64) *PostUpdate {
	if i != nil {
		pu.SetToSectionID(*i)
	}
	return pu
}

// AddToSectionID adds i to the "to_section_id" field.
func (pu *PostUpdate) AddToSectionID(i int64) *PostUpdate {
	pu.mutation.AddToSectionID(i)
	return pu
}

// SetLikesCount sets the "likes_count" field.
func (pu *PostUpdate) SetLikesCount(i int64) *PostUpdate {
	pu.mutation.ResetLikesCount()
	pu.mutation.SetLikesCount(i)
	return pu
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLikesCount(i *int64) *PostUpdate {
	if i != nil {
		pu.SetLikesCount(*i)
	}
	return pu
}

// AddLikesCount adds i to the "likes_count" field.
func (pu *PostUpdate) AddLikesCount(i int64) *PostUpdate {
	pu.mutation.AddLikesCount(i)
	return pu
}

// SetIsTop sets the "is_top" field.
func (pu *PostUpdate) SetIsTop(b bool) *PostUpdate {
	pu.mutation.SetIsTop(b)
	return pu
}

// SetNillableIsTop sets the "is_top" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsTop(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsTop(*b)
	}
	return pu
}

// SetIsHighlight sets the "is_highlight" field.
func (pu *PostUpdate) SetIsHighlight(b bool) *PostUpdate {
	pu.mutation.SetIsHighlight(b)
	return pu
}

// SetNillableIsHighlight sets the "is_highlight" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsHighlight(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsHighlight(*b)
	}
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTitle(s *string) *PostUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetBody sets the "body" field.
func (pu *PostUpdate) SetBody(s string) *PostUpdate {
	pu.mutation.SetBody(s)
	return pu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (pu *PostUpdate) SetNillableBody(s *string) *PostUpdate {
	if s != nil {
		pu.SetBody(*s)
	}
	return pu
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	if _, ok := pu.mutation.DeletedAt(); !ok && !pu.mutation.DeletedAtCleared() {
		v := post.UpdateDefaultDeletedAt()
		pu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.FromRoleID(); ok {
		if err := post.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Post.from_role_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ToSectionID(); ok {
		if err := post.ToSectionIDValidator(v); err != nil {
			return &ValidationError{Name: "to_section_id", err: fmt.Errorf(`ent: validator failed for field "Post.to_section_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.LikesCount(); ok {
		if err := post.LikesCountValidator(v); err != nil {
			return &ValidationError{Name: "likes_count", err: fmt.Errorf(`ent: validator failed for field "Post.likes_count": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Body(); ok {
		if err := post.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "Post.body": %w`, err)}
		}
	}
	return nil
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(post.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(post.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.FromRoleID(); ok {
		_spec.SetField(post.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedFromRoleID(); ok {
		_spec.AddField(post.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.ToSectionID(); ok {
		_spec.SetField(post.FieldToSectionID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedToSectionID(); ok {
		_spec.AddField(post.FieldToSectionID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.LikesCount(); ok {
		_spec.SetField(post.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedLikesCount(); ok {
		_spec.AddField(post.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.IsTop(); ok {
		_spec.SetField(post.FieldIsTop, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsHighlight(); ok {
		_spec.SetField(post.FieldIsHighlight, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Body(); ok {
		_spec.SetField(post.FieldBody, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PostUpdateOne) SetDeletedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PostUpdateOne) ClearDeletedAt() *PostUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetFromRoleID sets the "from_role_id" field.
func (puo *PostUpdateOne) SetFromRoleID(i int64) *PostUpdateOne {
	puo.mutation.ResetFromRoleID()
	puo.mutation.SetFromRoleID(i)
	return puo
}

// SetNillableFromRoleID sets the "from_role_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableFromRoleID(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetFromRoleID(*i)
	}
	return puo
}

// AddFromRoleID adds i to the "from_role_id" field.
func (puo *PostUpdateOne) AddFromRoleID(i int64) *PostUpdateOne {
	puo.mutation.AddFromRoleID(i)
	return puo
}

// SetToSectionID sets the "to_section_id" field.
func (puo *PostUpdateOne) SetToSectionID(i int64) *PostUpdateOne {
	puo.mutation.ResetToSectionID()
	puo.mutation.SetToSectionID(i)
	return puo
}

// SetNillableToSectionID sets the "to_section_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableToSectionID(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetToSectionID(*i)
	}
	return puo
}

// AddToSectionID adds i to the "to_section_id" field.
func (puo *PostUpdateOne) AddToSectionID(i int64) *PostUpdateOne {
	puo.mutation.AddToSectionID(i)
	return puo
}

// SetLikesCount sets the "likes_count" field.
func (puo *PostUpdateOne) SetLikesCount(i int64) *PostUpdateOne {
	puo.mutation.ResetLikesCount()
	puo.mutation.SetLikesCount(i)
	return puo
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLikesCount(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetLikesCount(*i)
	}
	return puo
}

// AddLikesCount adds i to the "likes_count" field.
func (puo *PostUpdateOne) AddLikesCount(i int64) *PostUpdateOne {
	puo.mutation.AddLikesCount(i)
	return puo
}

// SetIsTop sets the "is_top" field.
func (puo *PostUpdateOne) SetIsTop(b bool) *PostUpdateOne {
	puo.mutation.SetIsTop(b)
	return puo
}

// SetNillableIsTop sets the "is_top" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsTop(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsTop(*b)
	}
	return puo
}

// SetIsHighlight sets the "is_highlight" field.
func (puo *PostUpdateOne) SetIsHighlight(b bool) *PostUpdateOne {
	puo.mutation.SetIsHighlight(b)
	return puo
}

// SetNillableIsHighlight sets the "is_highlight" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsHighlight(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsHighlight(*b)
	}
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTitle(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetBody sets the "body" field.
func (puo *PostUpdateOne) SetBody(s string) *PostUpdateOne {
	puo.mutation.SetBody(s)
	return puo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableBody(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetBody(*s)
	}
	return puo
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	if _, ok := puo.mutation.DeletedAt(); !ok && !puo.mutation.DeletedAtCleared() {
		v := post.UpdateDefaultDeletedAt()
		puo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.FromRoleID(); ok {
		if err := post.FromRoleIDValidator(v); err != nil {
			return &ValidationError{Name: "from_role_id", err: fmt.Errorf(`ent: validator failed for field "Post.from_role_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ToSectionID(); ok {
		if err := post.ToSectionIDValidator(v); err != nil {
			return &ValidationError{Name: "to_section_id", err: fmt.Errorf(`ent: validator failed for field "Post.to_section_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.LikesCount(); ok {
		if err := post.LikesCountValidator(v); err != nil {
			return &ValidationError{Name: "likes_count", err: fmt.Errorf(`ent: validator failed for field "Post.likes_count": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Body(); ok {
		if err := post.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "Post.body": %w`, err)}
		}
	}
	return nil
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(post.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(post.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.FromRoleID(); ok {
		_spec.SetField(post.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedFromRoleID(); ok {
		_spec.AddField(post.FieldFromRoleID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.ToSectionID(); ok {
		_spec.SetField(post.FieldToSectionID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedToSectionID(); ok {
		_spec.AddField(post.FieldToSectionID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.LikesCount(); ok {
		_spec.SetField(post.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedLikesCount(); ok {
		_spec.AddField(post.FieldLikesCount, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.IsTop(); ok {
		_spec.SetField(post.FieldIsTop, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsHighlight(); ok {
		_spec.SetField(post.FieldIsHighlight, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Body(); ok {
		_spec.SetField(post.FieldBody, field.TypeString, value)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
